<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InstallationHelper</name>
    </assembly>
    <members>
        <member name="T:InstallationHelper.Helpers.WinAppHelper">
            <summary>
            Helper class containing methods for Windows application such as KIM, KSM, AD Import, Import Toolkit, Hotfix utility and Installer.
            </summary>
        </member>
        <member name="M:InstallationHelper.Helpers.WinAppHelper.GetWinAppName(System.String,InstallationHelper.DLLVersion)">
            <summary>
            Returns prefix for all Kentico WinApps.
            </summary>
            <param name="applicationName">Name of the Windows application</param>
            <param name="version">Version of the application assembly.</param>
        </member>
        <member name="M:InstallationHelper.Helpers.WinAppHelper.GetWinAppName(System.String,InstallationHelper.CMSVersion)">
            <summary>
            Returns prefix for all Kentico WinApps.
            </summary>
            <param name="applicationName">Name of the Windows application</param>
            <param name="version">Version of the application.</param>
        </member>
        <member name="T:InstallationHelper.FakedWebProjectInfo">
            <summary>
            Fake info class containing only certain information about web project.
            </summary>
        </member>
        <member name="T:InstallationHelper.IWebProjectInfo">
            <summary>
            Interface of info class containing information about web project.
            </summary>
        </member>
        <member name="P:InstallationHelper.IWebProjectInfo.Version">
            <summary>
            Project version.
            </summary>
        </member>
        <member name="P:InstallationHelper.IWebProjectInfo.NetVersion">
            <summary>
            Project .NET framework version.
            </summary>
        </member>
        <member name="P:InstallationHelper.IWebProjectInfo.SolutionPath">
            <summary>
            Gets solution folder physical path.
            </summary>
        </member>
        <member name="P:InstallationHelper.IWebProjectInfo.WebProjectPath">
            <summary>
            Gets web project folder physical path
            </summary>
        </member>
        <member name="P:InstallationHelper.IWebProjectInfo.IsWebApplication">
            <summary>
            Indicates whether the project is a web application.
            </summary>
        </member>
        <member name="P:InstallationHelper.IWebProjectInfo.IsSourceCode">
            <summary>
            Indicates whether the project contains source code.
            </summary>
        </member>
        <member name="P:InstallationHelper.IWebProjectInfo.IsAzureProject">
            <summary>
            Indicates whether the project is Microsoft Azure project.
            </summary>
        </member>
        <member name="M:InstallationHelper.FakedWebProjectInfo.#ctor(System.Boolean,System.Boolean,WinAppFoundation.NETVersionEnum)">
            <summary>
            Initializes project with given values for deployment purpose.
            </summary>
            <param name="isApplication">Indicates whether the project is a web application.</param>
            <param name="isAzure">Indicates whether the project is Microsoft Azure project.</param>
            <param name="netVersion">.NET framework version.</param>
        </member>
        <member name="P:InstallationHelper.FakedWebProjectInfo.Version">
            <summary>
            Gets or sets project version.
            </summary>
        </member>
        <member name="P:InstallationHelper.FakedWebProjectInfo.NetVersion">
            <summary>
            Gets or sets project .NET framework version.
            </summary>
        </member>
        <member name="P:InstallationHelper.FakedWebProjectInfo.SolutionPath">
            <summary>
            Gets or sets solution folder physical path.
            </summary>
        </member>
        <member name="P:InstallationHelper.FakedWebProjectInfo.WebProjectPath">
            <summary>
            Gets or sets web project folder physical path
            </summary>
        </member>
        <member name="P:InstallationHelper.FakedWebProjectInfo.IsWebApplication">
            <summary>
            Gets information whether the project is a web application.
            </summary>
        </member>
        <member name="P:InstallationHelper.FakedWebProjectInfo.IsSourceCode">
            <summary>
            Gets or sets information whether the project contains source code.
            </summary>
        </member>
        <member name="P:InstallationHelper.FakedWebProjectInfo.IsAzureProject">
            <summary>
            Gets information whether the project is Microsoft Azure project.
            </summary>
        </member>
        <member name="T:InstallationHelper.IInstallationPathProvider">
            <summary>
            Interface providing program files installation path
            </summary>
        </member>
        <member name="M:InstallationHelper.IInstallationPathProvider.GetInstallationPath">
            <summary>
            Returns path to program files installation
            </summary>
        </member>
        <member name="T:InstallationHelper.InstallationPathProvider">
            <summary>
            Class providing installation path based on an registry entry
            </summary>
        </member>
        <member name="M:InstallationHelper.InstallationPathProvider.GetInstallationPath">
            <summary>
            Returns path to installation files from registry.
            </summary>
        </member>
        <member name="T:InstallationHelper.AspNetCompilerParameters">
            <summary>
            Class reflecting ASP.NET compiler setting for web site project.
            </summary>
        </member>
        <member name="P:InstallationHelper.AspNetCompilerParameters.aspNetVirtualPath">
            <summary>
            Virtual path.
            </summary>
        </member>
        <member name="P:InstallationHelper.AspNetCompilerParameters.aspNetPhysicalPath">
            <summary>
            Physical parh.
            </summary>
        </member>
        <member name="P:InstallationHelper.AspNetCompilerParameters.aspNetTargetPath">
            <summary>
            Target path.
            </summary>
        </member>
        <member name="P:InstallationHelper.AspNetCompilerParameters.aspNetForce">
            <summary>
            Force overwrite.
            </summary>
        </member>
        <member name="P:InstallationHelper.AspNetCompilerParameters.aspNetUpdateable">
            <summary>
            Is updateable.
            </summary>
        </member>
        <member name="P:InstallationHelper.AspNetCompilerParameters.aspNetDebug">
            <summary>
            Debug.
            </summary>
        </member>
        <member name="P:InstallationHelper.AspNetCompilerParameters.aspNetKeyFile">
            <summary>
            Key file.
            </summary>
        </member>
        <member name="P:InstallationHelper.AspNetCompilerParameters.aspNetKeyContainer">
            <summary>
            Key container.
            </summary>
        </member>
        <member name="P:InstallationHelper.AspNetCompilerParameters.aspNetDelaySign">
            <summary>
            Delay sign.
            </summary>
        </member>
        <member name="P:InstallationHelper.AspNetCompilerParameters.aspNetAPTCA">
            <summary>
            APTCA.
            </summary>
        </member>
        <member name="P:InstallationHelper.AspNetCompilerParameters.aspNetFixedNames">
            <summary>
            FixedNames.
            </summary>
        </member>
        <member name="T:InstallationHelper.WebSiteProject">
            <summary>
            Class representing web site project.
            </summary>
        </member>
        <member name="T:InstallationHelper.SolutionProject">
            <summary>
            Reflects:
            
            Microsoft.Build.Construction.ProjectInSolution
            </summary>
        </member>
        <member name="M:InstallationHelper.SolutionProject.#cctor">
            <summary>
            Static constructor. Loads types from reflection.
            </summary>
        </member>
        <member name="M:InstallationHelper.SolutionProject.#ctor(InstallationHelper.SlnManager)">
            <summary>
            Base constructor.
            </summary>
            <param name="slnManager">Solution manager</param>
        </member>
        <member name="M:InstallationHelper.SolutionProject.#ctor(InstallationHelper.SlnManager,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="slnManager">Solution manager</param>
            <param name="solutionProject">Microsoft.Build.Construction.ProjectInSolution object</param>
        </member>
        <member name="M:InstallationHelper.SolutionProject.#ctor(InstallationHelper.SlnManager,System.String,System.String,System.Guid)">
            <summary>
            Create new project.
            </summary>
            <param name="slnManager">Solution manager</param>
            <param name="projectName">Project name</param>
            <param name="relativePath">Project relative path from solution root folder</param>
            <param name="projectGuid">Project GUID</param>
        </member>
        <member name="M:InstallationHelper.SolutionProject.GetProjectString">
            <summary>
            Gets project's string representation.
            </summary>
        </member>
        <member name="M:InstallationHelper.SolutionProject.GetProjectSectionString">
            <summary>
            Build project section string.
            </summary>
        </member>
        <member name="M:InstallationHelper.SolutionProject.ParseProjectGuid(System.Object)">
            <summary>
            Parses project GUID from raw ProjectInSolution object.
            </summary>
            <param name="solutionProject">Microsoft.Build.Construction.ProjectInSolution object</param>
        </member>
        <member name="M:InstallationHelper.SolutionProject.Equals(System.Object)">
            <summary>
            Compares two SolutionProjects with their GUIDs.
            </summary>
            <param name="obj">Object to compare</param>
        </member>
        <member name="M:InstallationHelper.SolutionProject.Equals(InstallationHelper.SolutionProject)">
            <summary>
            Compares two SolutionProjects with their GUIDs.
            </summary>
            <param name="other">Project to compare</param>
        </member>
        <member name="M:InstallationHelper.SolutionProject.GetHashCode">
            <summary>
            Generates hash code from project GUID.
            </summary>
        </member>
        <member name="M:InstallationHelper.SolutionProject.UpdateProject(InstallationHelper.SolutionProject)">
            <summary>
            Updates (or modifies) current project according to reference project.
            </summary>
            <param name="referenceProject">Reference project</param>
        </member>
        <member name="P:InstallationHelper.SolutionProject.ProjectName">
            <summary>
            Name of project.
            </summary>
        </member>
        <member name="P:InstallationHelper.SolutionProject.RelativePath">
            <summary>
            Relative path to project (from .sln file)
            </summary>
        </member>
        <member name="P:InstallationHelper.SolutionProject.SlnManager">
            <summary>
            Solution manager.
            </summary>
        </member>
        <member name="P:InstallationHelper.SolutionProject.AbsolutePath">
            <summary>
            Absolute path to project.
            </summary>
        </member>
        <member name="P:InstallationHelper.SolutionProject.ProjectGuid">
            <summary>
            Project's global unique identifier
            </summary>
        </member>
        <member name="P:InstallationHelper.SolutionProject.ProjectConfigurations">
            <summary>
            Build configurations of project.
            </summary>
        </member>
        <member name="P:InstallationHelper.SolutionProject.ProjectTypeGuid">
            <summary>
            Identifier of project type
            </summary>
        </member>
        <member name="P:InstallationHelper.SolutionProject.ConfigurationsBasePattern">
            <summary>
            Returns base RegEx pattern matching part of project's configurations.
            </summary>
        </member>
        <member name="P:InstallationHelper.SolutionProject.ConfigurationsSearchPattern">
            <summary>
            Returns RegEx pattern matching project's configurations.
            </summary>
        </member>
        <member name="F:InstallationHelper.WebSiteProject.PROJECT_TYPE_GUID_STRING">
            <summary>
            Web site project type.
            </summary>
        </member>
        <member name="M:InstallationHelper.WebSiteProject.#cctor">
            <summary>
            Static constructor. Loads types from reflection.
            </summary>
        </member>
        <member name="M:InstallationHelper.WebSiteProject.#ctor(InstallationHelper.SlnManager,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="slnManager">Solution manager</param>
            <param name="solutionProject">Microsoft.Build.Construction.ProjectInSolution object</param>
        </member>
        <member name="M:InstallationHelper.WebSiteProject.#ctor(InstallationHelper.SlnManager,System.String,System.String,System.Guid)">
            <summary>
            Create new project.
            </summary>
            <param name="slnManager">Solution manager</param>
            <param name="projectName">Project name</param>
            <param name="relativePath">Project relative path from solution root folder</param>
            <param name="projectGuid">Project GUID</param>
        </member>
        <member name="M:InstallationHelper.WebSiteProject.GetProjectSectionString">
            <summary>
            Build project section string.
            </summary>
        </member>
        <member name="M:InstallationHelper.WebSiteProject.UpdateProject(InstallationHelper.SolutionProject)">
            <summary>
            Updates website project dependencies.
            </summary>
            <param name="referenceProject">Reference project</param>
        </member>
        <member name="M:InstallationHelper.WebSiteProject.EscapeAttributeValue(System.String)">
            <summary>
            Escapes special characters (if any) in the given string.
            </summary>
            <param name="value">Text with special characters that need to be escaped.</param>
        </member>
        <member name="M:InstallationHelper.WebSiteProject.GetTypeFromMSBuild(System.String)">
            <summary>
            Tries to get specified type from Microsoft.Build assembly version 4.0 or 12.0.
            </summary>
            <param name="typeName">Name of the type to get.</param>
        </member>
        <member name="P:InstallationHelper.WebSiteProject.ProjectTypeGuid">
            <summary>
            Web site project type.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebSiteProject.AspNetConfigurations">
            <summary>
            ASP.NET compiler configurations.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebSiteProject.TargetFrameworkMoniker">
            <summary>
            Text representation of a moniker that uniquely identifies a target framework.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebSiteProject.Dependencies">
            <summary>
            Project dependencies (in the same format as it is in solution file (i.e. "{guid} = {guid}").
            </summary>
        </member>
        <member name="T:InstallationHelper.DLLVersion">
            <summary>
            Retrieves [AssemblyVersion] from DLL (assembly).
            </summary>
        </member>
        <member name="M:InstallationHelper.DLLVersion.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="assemblyPath">Full path to assembly</param>
        </member>
        <member name="P:InstallationHelper.DLLVersion.AssemblyVersion">
            <summary>
            Gets [AssemblyVersion] of the current assembly.
            Contains 4 digits separated by dot.
            </summary>
        </member>
        <member name="P:InstallationHelper.DLLVersion.AssemblyInformationalVersion">
            <summary>
            Gets [AssemblyInformationalVersion] of the current assembly.
            </summary>
        </member>
        <member name="P:InstallationHelper.DLLVersion.InformationalVersionWithoutSuffix">
            <summary>
            Gets version part of [AssemblyInformationalVersion].
            </summary>
        </member>
        <member name="P:InstallationHelper.DLLVersion.InformationalVersionSuffix">
            <summary>
            Gets suffix part of [AssemblyFileVersion].
            </summary>
        </member>
        <member name="P:InstallationHelper.DLLVersion.AssemblyFileVersion">
            <summary>
            Gets [AssemblyFileVersion] of the current assembly.
            Contains 4 digits separated by dot.
            </summary>
        </member>
        <member name="T:InstallationHelper.CMSVersion">
            <summary>
            Contains information about version of CMS.
            </summary>
        </member>
        <member name="M:InstallationHelper.CMSVersion.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:InstallationHelper.CMSVersion.#ctor(System.String)">
            <summary>
            Constructor that tries to parse version from the given string.
            </summary>
            <param name="version">Version to parse, acceptable forms are:
            4
            5.5R2
            5.5R2.35
            6.0
            6.0Denver
            6.0SP1
            7.0.40
            8.1.0 Beta
            8.0 .34468 (.34468 is suffix)
            </param>
        </member>
        <member name="M:InstallationHelper.CMSVersion.#ctor(InstallationHelper.DLLVersion)">
            <summary>
            Initializes CMS version from DLL metadata.
            </summary>
            <param name="version">DLL versions obtained from metadata.</param>
        </member>
        <member name="M:InstallationHelper.CMSVersion.op_Equality(InstallationHelper.CMSVersion,InstallationHelper.CMSVersion)">
            <summary>
            Determines whether two given versions are equal.
            </summary>
            <param name="v1">First version to compare</param>
            <param name="v2">Second version to compare</param>
            <returns>TRUE if two versions are equal.</returns>
        </member>
        <member name="M:InstallationHelper.CMSVersion.op_Inequality(InstallationHelper.CMSVersion,InstallationHelper.CMSVersion)">
            <summary>
            Determines whether two given versions are not equal.
            </summary>
            <param name="v1">First version to compare</param>
            <param name="v2">Second version to compare</param>
            <returns>TRUE if two versions are not equal.</returns>
        </member>
        <member name="M:InstallationHelper.CMSVersion.op_GreaterThan(InstallationHelper.CMSVersion,InstallationHelper.CMSVersion)">
            <summary>
            Determines whether <paramref name="v1"/> is greater than <paramref name="v2"/>.
            </summary>
            <param name="v1">First version to compare</param>
            <param name="v2">Second version to compare</param>
        </member>
        <member name="M:InstallationHelper.CMSVersion.op_LessThan(InstallationHelper.CMSVersion,InstallationHelper.CMSVersion)">
            <summary>
            Determines whether <paramref name="v1"/> is lower than <paramref name="v2"/>.
            </summary>
            <param name="v1">First version to compare</param>
            <param name="v2">Second version to compare</param>
        </member>
        <member name="M:InstallationHelper.CMSVersion.op_GreaterThanOrEqual(InstallationHelper.CMSVersion,InstallationHelper.CMSVersion)">
            <summary>
            Determines whether <paramref name="v1"/> is greater than or equal to <paramref name="v2"/>.
            </summary>
            <param name="v1">First version to compare</param>
            <param name="v2">Second version to compare</param>
        </member>
        <member name="M:InstallationHelper.CMSVersion.op_LessThanOrEqual(InstallationHelper.CMSVersion,InstallationHelper.CMSVersion)">
            <summary>
            Determines whether <paramref name="v1"/> is lower than or equal to <paramref name="v2"/>.
            </summary>
            <param name="v1">First version to compare</param>
            <param name="v2">Second version to compare</param>
        </member>
        <member name="M:InstallationHelper.CMSVersion.Equals(System.Object)">
            <summary>
            Determines whether the instance is equal to given object.
            </summary>
            <param name="obj">Object to compare</param>
            <returns>TRUE if objects are equal</returns>
        </member>
        <member name="M:InstallationHelper.CMSVersion.GetHashCode">
            <summary>
            Generates hash code for CMSVersion object.
            </summary>
            <returns>Hash code of the object</returns>
        </member>
        <member name="M:InstallationHelper.CMSVersion.AreEqual(InstallationHelper.CMSVersion,InstallationHelper.CMSVersion)">
            <summary>
            Determines whether two given versions contain the same data.
            </summary>
            <param name="v1">First version to compare</param>
            <param name="v2">Second version to compare</param>
            <returns>TRUE if versions are equal</returns>
        </member>
        <member name="M:InstallationHelper.CMSVersion.AreEqual(InstallationHelper.CMSVersion,InstallationHelper.CMSVersion,System.Boolean)">
            <summary>
            Determines whether two given versions contain the same data with optional suffix comparison.
            </summary>
            <param name="v1">First version to compare</param>
            <param name="v2">Second version to compare</param>
            <param name="ignoreSuffix">Whether to include version suffix in equality comparison.</param>
            <returns>TRUE if versions are equal</returns>
        </member>
        <member name="M:InstallationHelper.CMSVersion.HaveEqualMainVersions(InstallationHelper.CMSVersion,InstallationHelper.CMSVersion)">
            <summary>
            Determines whether two given versions contain the same main versions.
            </summary>
            <param name="v1">First version to compare</param>
            <param name="v2">Second version to compare</param>
            <returns>TRUE if main versions are equal</returns>
        </member>
        <member name="P:InstallationHelper.CMSVersion.Major">
            <summary>
            Major version number.
            </summary>
        </member>
        <member name="P:InstallationHelper.CMSVersion.Minor">
            <summary>
            Minor version number.
            </summary>
        </member>
        <member name="P:InstallationHelper.CMSVersion.Suffix">
            <summary>
            Version suffix.
            </summary>
        </member>
        <member name="P:InstallationHelper.CMSVersion.Hotfix">
            <summary>
            Hotfix version number.
            </summary>
        </member>
        <member name="P:InstallationHelper.CMSVersion.MainVersion">
            <summary>
            Gets main part of version.
            </summary>
        </member>
        <member name="P:InstallationHelper.CMSVersion.FullVersion">
            <summary>
            Gets full form of version.
            </summary>
        </member>
        <member name="P:InstallationHelper.CMSVersion.VersionInitialized">
            <summary>
            Determines whether the version is initialized.
            </summary>
        </member>
        <member name="P:InstallationHelper.CMSVersion.ErrorMessage">
            <summary>
            Gets or sets the error that appeared during initialization.
            </summary>
        </member>
        <member name="T:InstallationHelper.BuildConfigurationEnum">
            <summary>
            Project build configuration options.
            </summary>
        </member>
        <member name="F:InstallationHelper.BuildConfigurationEnum.Default">
            <summary>
            Default configuration according to project file.
            </summary>
        </member>
        <member name="F:InstallationHelper.BuildConfigurationEnum.Release">
            <summary>
            Release configuration.
            </summary>
        </member>
        <member name="F:InstallationHelper.BuildConfigurationEnum.Debug">
            <summary>
            Debug configuration.
            </summary>
        </member>
        <member name="T:InstallationHelper.ToolsInfo">
            <summary>
            Contains tools information specified by .NET version.
            </summary>
        </member>
        <member name="M:InstallationHelper.ToolsInfo.#ctor(WinAppFoundation.NETVersionEnum)">
            <summary>
            Initializes tools versions from given <see cref="T:WinAppFoundation.NETVersionEnum"/>.
            </summary>
            <param name="version">.NET version selected from enumeration.</param>
        </member>
        <member name="M:InstallationHelper.ToolsInfo.GetVisualStudioVersion(System.Int32)">
            <summary>
            Returns Visual Studio version as a string by default suitable for MSBuild.
            </summary>
            <param name="fieldCount">Number of version components returned</param>
        </member>
        <member name="P:InstallationHelper.ToolsInfo.DotNetVersion">
            <summary>
            Gets .NET version
            </summary>
        </member>
        <member name="P:InstallationHelper.ToolsInfo.VisualStudioVersion">
            <summary>
            Gets Visual Studio version
            </summary>
        </member>
        <member name="T:InstallationHelper.VerbosityLevelEnum">
            <summary>
            Copy of Microsoft.Build.Framework.LoggerVerbosity so a reference to the whole library doesn't have to be added everywhere we want to configure BuildManager.
            </summary>
        </member>
        <member name="F:InstallationHelper.VerbosityLevelEnum.Quiet">
            <summary>
            Quiet verbosity, which displays a build summary.
            </summary>
        </member>
        <member name="F:InstallationHelper.VerbosityLevelEnum.Minimal">
            <summary>
            Normal verbosity, which displays errors, warnings, messages with MessageImportance values of High, some status events, and a build summary.
            </summary>
        </member>
        <member name="F:InstallationHelper.VerbosityLevelEnum.Normal">
            <summary>
            Minimal verbosity, which displays errors, warnings, messages with MessageImportance values of High, and a build summary.
            </summary>
        </member>
        <member name="F:InstallationHelper.VerbosityLevelEnum.Detailed">
            <summary>
            Detailed verbosity, which displays errors, warnings, messages with MessageImportance values of High or Normal, all status events, and a build summary.
            </summary>
        </member>
        <member name="F:InstallationHelper.VerbosityLevelEnum.Diagnostic">
            <summary>
            Diagnostic verbosity, which displays all errors, warnings, messages, status events, and a build summary.
            </summary>
        </member>
        <member name="T:InstallationHelper.ExeLauncher">
            <summary>
            Runs EXE files and logs standard output and standard error output messages.
            </summary>
        </member>
        <member name="M:InstallationHelper.ExeLauncher.#ctor(WinAppFoundation.IMessageLog)">
            <summary>
            Default constructor.
            </summary>
            <param name="log">Provides message logging.</param>
        </member>
        <member name="M:InstallationHelper.ExeLauncher.Execute(System.String,System.String)">
            <summary>
            Runs .exe file, waits for process to end and returns error code.
            </summary>
            <param name="exePath">Relative or absolute path to the executable file</param>
            <param name="arguments">Command line arguments (make sure all paths are enclosed within quotation marks)</param>   
            <returns>Exit code</returns>
        </member>
        <member name="M:InstallationHelper.ExeLauncher.Execute(System.String,System.Diagnostics.Process@,System.String)">
            <summary>
            Runs .exe file, waits for process to end and returns error code.
            </summary>
            <param name="exePath">Relative or absolute path to the executable file</param>
            <param name="arguments">Command line arguments (make sure all paths are enclosed within quotation marks)</param>    
            <param name="process">Process used for execution. Mostly used for retrieving actual process outputs.</param>
            <returns>Exit code</returns>
        </member>
        <member name="M:InstallationHelper.ExeLauncher.CancelExecution(System.Diagnostics.Process)">
            <summary>
            Cancels execution by terminating process.
            </summary>
            <param name="process">Process to cancel</param>
        </member>
        <member name="M:InstallationHelper.ExeLauncher.ExecuteAsync(System.String,System.String)">
            <summary>
            Runs .exe file.
            </summary>
            <param name="exePath">Relative or absolute path to installation file</param>
            <param name="arguments">Command line arguments (make sure all paths are enclosed within quotation marks)</param>
            <returns>Started process</returns>       
        </member>
        <member name="M:InstallationHelper.ExeLauncher.WaitForFinish(System.Diagnostics.Process)">
            <summary>
            Wait for process to finish and returns error code.
            </summary>
            <param name="process">Requested process</param>
            <returns>Exit code</returns>        
        </member>
        <member name="P:InstallationHelper.ExeLauncher.Processes">
            <summary>
            Gets processes being executed.
            </summary>
        </member>
        <member name="P:InstallationHelper.ExeLauncher.ExitedProcesses">
            <summary>
            Gets exited processes.
            </summary>
        </member>
        <member name="P:InstallationHelper.ExeLauncher.ErrorOutputs">
            <summary>
            Gets error outputs from registered Processes.
            </summary>
        </member>
        <member name="P:InstallationHelper.ExeLauncher.StandardOutputs">
            <summary>
            Gets standard outputs from registered Processes.
            </summary>
        </member>
        <member name="P:InstallationHelper.ExeLauncher.Log">
            <summary>
            Provides message logging.
            </summary>
        </member>
        <member name="T:InstallationHelper.ExeInstaller">
            <summary>
            Installs EXE files and handles processes error codes.
            </summary>
        </member>
        <member name="F:InstallationHelper.ExeInstaller.INSTALLER_SERVICE_MUTEX_NAME">
            <summary>
            The _MSIExecute mutex is used by the MSI installer service to serialize installations and prevent multiple MSI based installations happening at the same time.
            For more info: http://msdn.microsoft.com/en-us/library/aa372909(VS.85).aspx
            </summary>
        </member>
        <member name="M:InstallationHelper.ExeInstaller.#ctor(WinAppFoundation.IMessageLog)">
            <summary>
            Default constructor.
            </summary>
            <param name="log">Provides message logging.</param>
        </member>
        <member name="M:InstallationHelper.ExeInstaller.Install(System.String,System.String,System.Boolean)">
            <summary>
            Runs .exe installation file, waits for process to end and returns error code.
            </summary>
            <param name="exePath">Relative or absolute path to installation file</param>
            <param name="arguments">Command line arguments</param>
            <param name="noRestart">Do not allow any restarts after installation.</param>    
            <returns>Error status</returns>
        </member>
        <member name="M:InstallationHelper.ExeInstaller.WaitForInstallerService(System.Int32)">
            <summary>
            Wait (up to a timeout) for the MSI installer service to become free.
            </summary>
            <returns>
            Returns true for a successful wait, when the installer service has become free.
            Returns false when waiting for the installer service has exceeded the timeout.
            </returns>
        </member>
        <member name="P:InstallationHelper.ExeInstaller.Log">
            <summary>
            Provides message logging.
            </summary>
        </member>
        <member name="T:InstallationHelper.AbstractSetupElement">
            <summary>
            Base class used for serialization of installation settings.
            </summary>
        </member>
        <member name="M:InstallationHelper.AbstractSetupElement.#ctor">
            <summary>
            Initializes attributes.
            </summary>
        </member>
        <member name="M:InstallationHelper.AbstractSetupElement.LoadAttributes(System.Xml.XmlNode)">
            <summary>
            Loads attributes from given node.
            </summary>
            <param name="node">XML node to load attributes from.</param>
        </member>
        <member name="M:InstallationHelper.AbstractSetupElement.SaveAttributes(System.Xml.XmlDocument,System.Xml.XmlNode,System.String)">
            <summary>
            Saves attributes from dictionary to the given node.
            </summary>
            <param name="doc">XML document</param>
            <param name="node">Node</param>
            <param name="parentName">Name of parent XML element</param>
        </member>
        <member name="M:InstallationHelper.AbstractSetupElement.CreateAttribute``1(System.String,``0,System.Xml.XmlNode)">
            <summary>
            Loads/initializes attribute from XML
            </summary>
            <param name="name">Name of the attribute</param>
            <param name="defaultValue">Default value if attribute not used</param>
            <param name="node">Node</param>
        </member>
        <member name="M:InstallationHelper.AbstractSetupElement.InitializeAttribute``1(System.String,``0,System.Xml.XmlNode)">
            <summary>
            Appends new attribute to the list of attributes.
            </summary>
            <param name="name">Name of the attribute</param>
            <param name="defaultValue">Default value if attribute not used</param>
            <param name="node">Node</param>
        </member>
        <member name="M:InstallationHelper.AbstractSetupElement.GetAttrValue``1(System.String,System.Boolean)">
            <summary>
            Returns value of the given attribute.
            </summary>
            <param name="name">Name of the attribute</param>
            <param name="resolveMacros">Whether to resolve macros before the value is returned</param>
        </member>
        <member name="M:InstallationHelper.AbstractSetupElement.SetAttrValue``1(System.String,``0)">
            <summary>
            Sets value of the given attribute.
            </summary>
            <param name="name">Name of the attribute</param>
            <param name="value">Value</param>
        </member>
        <member name="P:InstallationHelper.AbstractSetupElement.Attributes">
            <summary>
            List of all attributes for particular setting.
            </summary>
        </member>
        <member name="T:InstallationHelper.WebProjectRemoveInfo">
            <summary>
            Class providing information needed to remove project.
            </summary>
        </member>
        <member name="M:InstallationHelper.WebProjectRemoveInfo.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="path">Path to a web project</param>
        </member>
        <member name="M:InstallationHelper.WebProjectRemoveInfo.SkipProject">
            <summary>
            Sets skip flag.
            </summary>
        </member>
        <member name="M:InstallationHelper.WebProjectRemoveInfo.GetDBNameFromConnString(System.String)">
            <summary>
            Returns DB name from connection string.
            </summary>
            <param name="connString">Connection string</param>
        </member>
        <member name="P:InstallationHelper.WebProjectRemoveInfo.SkipItem">
            <summary>
            Flag indicates if item should be skipped (due to corrupted web.config or connection string).
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectRemoveInfo.ConnectionString">
            <summary>
            Connection string
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectRemoveInfo.OMConnectionString">
            <summary>
            Connection string to separate DB (if any)
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectRemoveInfo.DBName">
            <summary>
            DB name
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectRemoveInfo.OMDBName">
            <summary>
            Name of the separate DB.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectRemoveInfo.ValidWebProject">
            <summary>
            Current remove info belongs to valid web project.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectRemoveInfo.RemoveAppPool">
            <summary>
            Indicates whether application pool will be deleted.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectRemoveInfo.RemoveDB">
            <summary>
            Indicates whether DB will be deleted.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectRemoveInfo.RemoveFiles">
            <summary>
            Indicates whether files will be deleted from file system.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectRemoveInfo.RemoveRecord">
            <summary>
            Indicates whether instance will be deleted from instance list.
            </summary>
        </member>
        <member name="T:InstallationHelper.BuildManager">
            <summary>
            Allows detection whether local machine is able to build .NET projects and if so, provides this functionality.
            </summary>
        </member>
        <member name="M:InstallationHelper.BuildManager.#ctor(WinAppFoundation.IMessageLog,WinAppFoundation.NETVersionEnum,WinAppFoundation.ArchitectureEnum)">
            <summary>
            Initializes build manager instance with desired .NET version and CPU architecture.
            </summary>
            <param name="log">Provides message logging.</param>
            <param name="netVersion">Target .NET version</param>
            <param name="architecture">Target CPU architecture</param>
        </member>
        <member name="M:InstallationHelper.BuildManager.Build(System.String)">
            <summary>
            Builds solution on given path.
            </summary>
            <param name="solutionPath">Path to the solution file</param>
        </member>
        <member name="M:InstallationHelper.BuildManager.SetLog(WinAppFoundation.IMessageLog)">
            <summary>
            Passes new <see cref="T:WinAppFoundation.IMessageLog"/> to existing build manager.
            </summary>
            <param name="log">Provides message logging.</param>
        </member>
        <member name="M:InstallationHelper.BuildManager.DetectBuildTools">
            <summary>
            Returns true if build for current configuration can be performed on the local machine.
            </summary>
        </member>
        <member name="P:InstallationHelper.BuildManager.TargetTools">
            <summary>
            Gets the .NET version to build for. Also determines what Visual Studio includes will be used.
            </summary>
        </member>
        <member name="P:InstallationHelper.BuildManager.Architecture">
            <summary>
            Gets the CPU architecture to build for.
            </summary>
        </member>
        <member name="P:InstallationHelper.BuildManager.CanBuild">
            <summary>
            Indicates whether build for current configuration can be performed on the local machine.
            </summary>
        </member>
        <member name="P:InstallationHelper.BuildManager.ProcessLimit">
            <summary>
            Specifies the maximum number of concurrent processes to use when building.
            When set to 0, one process will be used for each processor core on the computer.
            </summary>
        </member>
        <member name="P:InstallationHelper.BuildManager.Verbosity">
            <summary>
            Specifies the amount of information to display in the build log
            </summary>
        </member>
        <member name="P:InstallationHelper.BuildManager.ErrorsOnly">
            <summary>
            Indicates whether only errors should be logged or (by default) warnings as well.
            </summary>
        </member>
        <member name="P:InstallationHelper.BuildManager.Configuration">
            <summary>
            Specifies the target build configuration.
            </summary>
        </member>
        <member name="P:InstallationHelper.BuildManager.Platform">
            <summary>
            Specifies the target build platform.
            </summary>
        </member>
        <member name="P:InstallationHelper.BuildManager.BuildToolPath">
            <summary>
            Path to the build tool, initialized if CanBuild is true.
            </summary>
        </member>
        <member name="P:InstallationHelper.BuildManager.Log">
            <summary>
            Provides message logging.
            </summary>
        </member>
        <member name="T:InstallationHelper.CSProjItem">
            <summary>
            Item in .csproj file.
            </summary>
        </member>
        <member name="M:InstallationHelper.CSProjItem.#ctor(InstallationHelper.CSProjItemTypeEnum,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Xml.XmlDocument,System.String)">
            <summary>
            Construct Item in .csproj .
            </summary>
            <param name="buildAction">Build action of project item.</param>
            <param name="include">Required attribute. The file or wildcard to include in the list of items.</param>
            <param name="metadata">Items metadata.</param>
            <param name="projectFile">Project file</param>
            <param name="condition">Optional attribute. Condition under which the item will be included.</param>
        </member>
        <member name="M:InstallationHelper.CSProjItem.#ctor(System.Xml.XmlNode)">
            <summary>
            Constructs from existing item in .csproj.
            </summary>
            <param name="existingItem">Existing item XML node</param>
        </member>
        <member name="M:InstallationHelper.CSProjItem.SaveTo(System.Xml.XmlNode)">
            <summary>
            Converts .csproj item from object representation to XML node and adds it to given itemGroup.
            </summary>
            <param name="parent">Item group node</param>
        </member>
        <member name="M:InstallationHelper.CSProjItem.Clone(System.Xml.XmlDocument)">
            <summary>
            Create a deep copy of .csproj item.
            Fresh copy doesn't have an existing item.
            </summary>
            <param name="document">Document of node's copy.</param>
        </member>
        <member name="M:InstallationHelper.CSProjItem.Equals(InstallationHelper.CSProjItem)">
            <summary>
            Compares current item with given item by include attribute.
            References are compared by assembly name instead.
            Project references are compared by project guids instead.
            </summary>
            <param name="other">Item to compare with</param>
        </member>
        <member name="M:InstallationHelper.CSProjItem.Equals(System.Object)">
            <summary>
            Compares two .csproj items.
            </summary>
            <param name="item">Csproj item to compare with</param>
        </member>
        <member name="M:InstallationHelper.CSProjItem.GetHashCode">
            <summary>
            Generates current .csproj item hash.
            </summary>
        </member>
        <member name="P:InstallationHelper.CSProjItem.Include">
            <summary>
            Required attribute. The file or wildcard to include in the list of items.
            </summary>
        </member>
        <member name="P:InstallationHelper.CSProjItem.Condition">
            <summary>
            Optional attribute. Condition under which the item will be included.
            </summary>
        </member>
        <member name="P:InstallationHelper.CSProjItem.AssemblyName">
            <summary>
            Name of the referenced assembly. Returns null if current action is not <see cref="F:InstallationHelper.CSProjItemTypeEnum.Reference"/>.
            </summary>
            <remarks>
            Name is parsed out of Include attribute of the Reference node in the .csproj file. The Include attribute might look like this:
            "AjaxControlToolkit, Version=4.1.60919.0, Culture=neutral, PublicKeyToken=28f01b0e84b6d53e, processorArchitecture=MSIL".
            In that case, <see cref="P:InstallationHelper.CSProjItem.AssemblyName"/> will be "AjaxControlToolkit".
            </remarks>
        </member>
        <member name="P:InstallationHelper.CSProjItem.ReferencedAssemblyVersion">
            <summary>
            Version of the referenced assembly. Returns null if current action is not <see cref="F:InstallationHelper.CSProjItemTypeEnum.Reference"/> or
            if referenced assembly does not specify version (can happen for system assemblies where version is deduced from target framework).
            </summary>
            <remarks>
            Version is parsed out of Include attribute of the Reference node in the .csproj file. The Include attribute might look like this:
            "AjaxControlToolkit, Version=4.1.60919.0, Culture=neutral, PublicKeyToken=28f01b0e84b6d53e, processorArchitecture=MSIL".
            In that case, <see cref="P:InstallationHelper.CSProjItem.ReferencedAssemblyVersion"/> will be "4.1.60919.0".
            </remarks>
        </member>
        <member name="P:InstallationHelper.CSProjItem.BuildAction">
            <summary>
            Build action. Item XML representation consist of element named by build action.
            </summary>
        </member>
        <member name="P:InstallationHelper.CSProjItem.Metadata">
            <summary>
            Items metadata. For example SubType or DependentUpon.
            </summary>
        </member>
        <member name="P:InstallationHelper.CSProjItem.ProjectFile">
            <summary>
            Gets project file, where nodes are created.
            </summary>
        </member>
        <member name="P:InstallationHelper.CSProjItem.ExistingNode">
            <summary>
            Node from .csproj bound to this object.
            </summary>
        </member>
        <member name="T:InstallationHelper.CSProjItemTypeEnum">
            <summary>
            Type of item in .csproj file.
            </summary>
        </member>
        <member name="F:InstallationHelper.CSProjItemTypeEnum.None">
            <summary>
            The file is not included in the project output group and is not compiled in the build process. 
            </summary>
        </member>
        <member name="F:InstallationHelper.CSProjItemTypeEnum.Compile">
            <summary>
            The file is compiled into the build output.
            </summary>
        </member>
        <member name="F:InstallationHelper.CSProjItemTypeEnum.Content">
            <summary>
            The file is not compiled, but is included in the Content output group.
            </summary>
        </member>
        <member name="F:InstallationHelper.CSProjItemTypeEnum.Embedded">
            <summary>
            This file is embedded in the main project build output as a DLL or executable.
            </summary>
        </member>
        <member name="F:InstallationHelper.CSProjItemTypeEnum.Reference">
            <summary>
            This DLL is referenced from the project.
            </summary>
        </member>
        <member name="F:InstallationHelper.CSProjItemTypeEnum.Folder">
            <summary>
            The reference is a directory.
            </summary>
        </member>
        <member name="F:InstallationHelper.CSProjItemTypeEnum.ProjectReference">
            <summary>
            This a reference to another project.
            </summary>
        </member>
        <member name="T:InstallationHelper.FinalStatusEnum">
            <summary>
            End stat of a finished process.
            </summary>
        </member>
        <member name="F:InstallationHelper.FinalStatusEnum.Success">
            <summary>
            Process finished successfully.
            </summary>
        </member>
        <member name="F:InstallationHelper.FinalStatusEnum.Canceled">
            <summary>
            Process was canceled by the user.
            </summary>
        </member>
        <member name="F:InstallationHelper.FinalStatusEnum.Error">
            <summary>
            Process failed.
            </summary>
        </member>
        <member name="T:InstallationHelper.IProgress">
            <summary>
            Interface for the progress logging component.
            </summary>
        </member>
        <member name="M:InstallationHelper.IProgress.SetProgress(System.Int32)">
            <summary>
            Sets the current progress.
            </summary>
            <param name="progress">Progress value in percent</param>
        </member>
        <member name="M:InstallationHelper.IProgress.Complete(InstallationHelper.FinalStatusEnum)">
            <summary>
            Indicates that current operation has been completed.
            </summary>
            <param name="status">Indicates whether operation has been successful, canceled or failed.</param>
        </member>
        <member name="T:InstallationHelper.DialogResultEnum">
            <summary>
            Enumeration exactly same as System.Windows.Forms.DialogResult
            </summary>
        </member>
        <member name="F:InstallationHelper.DialogResultEnum.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:InstallationHelper.DialogResultEnum.OK">
            <summary>
            OK.
            </summary>
        </member>
        <member name="F:InstallationHelper.DialogResultEnum.Cancel">
            <summary>
            Cancel.
            </summary>
        </member>
        <member name="F:InstallationHelper.DialogResultEnum.Abort">
            <summary>
            Abort.
            </summary>
        </member>
        <member name="F:InstallationHelper.DialogResultEnum.Retry">
            <summary>
            Retry.
            </summary>
        </member>
        <member name="F:InstallationHelper.DialogResultEnum.Ignore">
            <summary>
            Ignore.
            </summary>
        </member>
        <member name="F:InstallationHelper.DialogResultEnum.Yes">
            <summary>
            Yes.
            </summary>
        </member>
        <member name="F:InstallationHelper.DialogResultEnum.No">
            <summary>
            No.
            </summary>
        </member>
        <member name="T:InstallationHelper.Resources.Localization">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.buildmanager_buildstarted">
            <summary>
              Looks up a localized string similar to Building &apos;{0}&apos;....
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.buildmanager_finishedsuccessfully">
            <summary>
              Looks up a localized string similar to Successfully finished building &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.buildmanager_finishedwitherrors">
            <summary>
              Looks up a localized string similar to Building &apos;{0}&apos; finished with errors..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.buildmanager_nobuildtools">
            <summary>
              Looks up a localized string similar to No build tools are available on {0}..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.cmsfileshelper_missinghotfix">
            <summary>
              Looks up a localized string similar to Missing hotfix.txt file..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.cmsfileshelper_readingversionfailed">
            <summary>
              Looks up a localized string similar to Reading version failed: {0}.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Component_Component">
            <summary>
              Looks up a localized string similar to Kentico.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Component_core">
            <summary>
              Looks up a localized string similar to Core.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Component_dbsscripts">
            <summary>
              Looks up a localized string similar to Database setup scripts.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Component_DictionaryComponent">
            <summary>
              Looks up a localized string similar to SpellChecker dictionaries.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Component_ModuleComponent">
            <summary>
              Looks up a localized string similar to Modules.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Component_TemplateComponent">
            <summary>
              Looks up a localized string similar to Sample site templates.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Component_UICultureComponent">
            <summary>
              Looks up a localized string similar to UI Cultures.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.componentprovider_sourcedirdoesnotexist">
            <summary>
              Looks up a localized string similar to Source directory &apos;{0}&apos; is missing..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.exeinstaller_failed">
            <summary>
              Looks up a localized string similar to Installation of &apos;{0}&apos; failed with code &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.exelauncher_errorwaiting">
            <summary>
              Looks up a localized string similar to Error when waiting for &apos;{0}&apos; to finish..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.exelauncher_finished">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; exited with code {1}..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.exelauncher_launching">
            <summary>
              Looks up a localized string similar to Launching &apos;{0}&apos; with the following arguments: &apos;{1}&apos;....
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.install_net45required">
            <summary>
              Looks up a localized string similar to .NET 4.5 is not installed on this computer..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.install_net46required">
            <summary>
              Looks up a localized string similar to .NET 4.6 is not installed on this computer..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.main_cmssetupnotfound">
            <summary>
              Looks up a localized string similar to Kentico setup (i.e. Kentico_xxx.exe) not found in {0}.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.main_conntodbfailed">
            <summary>
              Looks up a localized string similar to Connection to DB failed, original error: {0}.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.main_conntodbserverfailed">
            <summary>
              Looks up a localized string similar to Connection to DB server failed, original error: {0}.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.main_dependantmissing">
            <summary>
              Looks up a localized string similar to Modules &apos;{1}&apos; can&apos;t be installed without module &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.main_dependencymissing">
            <summary>
              Looks up a localized string similar to Module &apos;{0}&apos; requires also modules &apos;{1}&apos; to be selected..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.main_errormessage">
            <summary>
              Looks up a localized string similar to Error message: {0}.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.main_extractingfinished">
            <summary>
              Looks up a localized string similar to Extracting setup files finished..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.main_extractingsetupfiles">
            <summary>
              Looks up a localized string similar to Extracting setup files (it may take several minutes)....
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.main_invalidsite">
            <summary>
              Looks up a localized string similar to Invalid web site: &apos;{0}&apos; does not exist in the IIS..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.main_malformedxml">
            <summary>
              Looks up a localized string similar to Error loading configuration file (maybe caused by malformed XML)..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.main_setupfoldercantbedeleted">
            <summary>
              Looks up a localized string similar to Setup directory &apos;{0}&apos; contains files and can&apos;t be deleted.  If you want to remove previous installation add attribute DeleteExisting=&quot;true&quot; in Setup element in XML file or remove setup directory manually..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.main_setuptargetdirnotempty">
            <summary>
              Looks up a localized string similar to Setup target directory &apos;{0}&apos; is not empty. If you want to uninstall previous installation add attribute DeleteExisting=&quot;true&quot; in Setup element in XML file or uninstall previous installation manually..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.main_targetfoldercantbedeleted">
            <summary>
              Looks up a localized string similar to Web site target directory &apos;{0}&apos; contains files and can&apos;t be deleted.  If you want to remove previous web site add attribute DeleteExisting=&quot;true&quot; in IIS element in XML file or remove web site target directory manually..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.main_targetfolderdoesnotexist">
            <summary>
              Looks up a localized string similar to It is not possible to modify existing installation because the web site directory &apos;{0}&apos; does not exist..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.main_testdbexistsetdelete">
            <summary>
              Looks up a localized string similar to Database &apos;{0}&apos; already exist and can&apos;t be deleted.  If you want to remove this database add attribute DeleteExisting=&quot;true&quot; in SQL element in XML file or remove database manually..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.main_unexpectedduringextract">
            <summary>
              Looks up a localized string similar to Unexpected exception occurred during extraction of setup file: {0}.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.main_unexpectedduringinstallation">
            <summary>
              Looks up a localized string similar to Unexpected exception occurred during installation: {0}.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.main_validationdictionariesfailed">
            <summary>
              Looks up a localized string similar to Dictionaries validation failed..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.main_validationlicensesfailed">
            <summary>
              Looks up a localized string similar to Licenses validation failed..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.main_validationmodulesfailed">
            <summary>
              Looks up a localized string similar to Modules validation failed..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.main_validationuiculturesfailed">
            <summary>
              Looks up a localized string similar to UI cultures validation failed..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.main_validationwebsitesfailed">
            <summary>
              Looks up a localized string similar to Web sites validation failed..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.main_validationwebtemplatesfailed">
            <summary>
              Looks up a localized string similar to Web templates validation failed..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.main_webinstallernotfound">
            <summary>
              Looks up a localized string similar to Webinstaller.exe not found in {0}.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.main_xmlmissing">
            <summary>
              Looks up a localized string similar to XML file is missing..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Module_abtest">
            <summary>
              Looks up a localized string similar to A/B Testing.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Module_bizforms">
            <summary>
              Looks up a localized string similar to Forms.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Module_blogs">
            <summary>
              Looks up a localized string similar to Blogs.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Module_booking">
            <summary>
              Looks up a localized string similar to Booking system.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Module_chat">
            <summary>
              Looks up a localized string similar to Chat.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Module_community">
            <summary>
              Looks up a localized string similar to Community.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Module_controlsexamples">
            <summary>
              Looks up a localized string similar to Controls examples.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Module_departments">
            <summary>
              Looks up a localized string similar to Departments.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Module_ecommerce">
            <summary>
              Looks up a localized string similar to E-commerce.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Module_forums">
            <summary>
              Looks up a localized string similar to Forums.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Module_friends">
            <summary>
              Looks up a localized string similar to Friends.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Module_groups">
            <summary>
              Looks up a localized string similar to Groups.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Module_medialibrary">
            <summary>
              Looks up a localized string similar to Media library.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Module_messageboards">
            <summary>
              Looks up a localized string similar to Message boards.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Module_messaging">
            <summary>
              Looks up a localized string similar to Messaging.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Module_newsletters">
            <summary>
              Looks up a localized string similar to Email marketing.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Module_notifications">
            <summary>
              Looks up a localized string similar to Notifications.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Module_onlinemarketing">
            <summary>
              Looks up a localized string similar to On-line marketing.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Module_personas">
            <summary>
              Looks up a localized string similar to Personas.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Module_pm">
            <summary>
              Looks up a localized string similar to Project management.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Module_polls">
            <summary>
              Looks up a localized string similar to Polls.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Module_reporting">
            <summary>
              Looks up a localized string similar to Reporting.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Module_sharepoint">
            <summary>
              Looks up a localized string similar to Sharepoint.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Module_socialmarketing">
            <summary>
              Looks up a localized string similar to Social marketing.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Module_staging">
            <summary>
              Looks up a localized string similar to Staging.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Module_strandsrecommender">
            <summary>
              Looks up a localized string similar to Strands Recommender.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Module_webdav">
            <summary>
              Looks up a localized string similar to WebDAV.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Module_wifintegration">
            <summary>
              Looks up a localized string similar to WIF integration.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Module_windowsservices">
            <summary>
              Looks up a localized string similar to Windows services.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.msi_automaticfailed">
            <summary>
              Looks up a localized string similar to Automatic installation of &apos;{0}&apos; failed. Launching its UI....
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.msi_errorwaitingforinstaller">
            <summary>
              Looks up a localized string similar to There was an error when waiting for installer service..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.msi_installationfailed">
            <summary>
              Looks up a localized string similar to Installation of &apos;{0}&apos; package failed. Log file can be found at &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.msi_installingnatively">
            <summary>
              Looks up a localized string similar to Installing package &apos;{0}&apos; natively....
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.msi_packageinvalid">
            <summary>
              Looks up a localized string similar to Package &apos;{0}&apos; is invalid..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.msi_waitingforinstaller">
            <summary>
              Looks up a localized string similar to Waiting for installer service to become free....
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.prerequisiteinstaller_acquiringpackage">
            <summary>
              Looks up a localized string similar to Acquiring package &apos;{0}&apos;....
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.prerequisiteinstaller_cancelled">
            <summary>
              Looks up a localized string similar to Prerequisites installation has been cancelled by user..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.prerequisiteinstaller_downloadcomplete">
            <summary>
              Looks up a localized string similar to Downloading package &apos;{0}&apos; succeeded..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.prerequisiteinstaller_downloadfailed">
            <summary>
              Looks up a localized string similar to Downloading package &apos;{0}&apos; failed. Original message: &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.prerequisiteinstaller_installcomplete">
            <summary>
              Looks up a localized string similar to Installing package &apos;{0}&apos; succeeded..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.prerequisiteinstaller_installfailed">
            <summary>
              Looks up a localized string similar to Installation of &apos;{0}&apos; finished with status : {1}..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.prerequisiteinstaller_installingpackage">
            <summary>
              Looks up a localized string similar to Installing package &apos;{0}&apos;....
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.prerequisiteinstaller_waitingforprerequisites">
            <summary>
              Looks up a localized string similar to Waiting for the prerequisites installation to finish....
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Resource_cs_cz">
            <summary>
              Looks up a localized string similar to Czech (Czech republic).
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Resource_default">
            <summary>
              Looks up a localized string similar to English.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.Resource_sk_sk">
            <summary>
              Looks up a localized string similar to Slovak (Slovakia).
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.setupinfo_unsupportedazure40">
            <summary>
              Looks up a localized string similar to Microsoft Azure project with .NET framework 4.0 is not supported..
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.WebTemplate_BlankSite">
            <summary>
              Looks up a localized string similar to Blank Site.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.WebTemplate_BlankSiteAspx">
            <summary>
              Looks up a localized string similar to ASPX Blank Site.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.WebTemplate_BlankSiteMvc">
            <summary>
              Looks up a localized string similar to MVC Blank Site.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.WebTemplate_CommunitySite">
            <summary>
              Looks up a localized string similar to Community Site.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.WebTemplate_CorporateSite">
            <summary>
              Looks up a localized string similar to Corporate Site.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.WebTemplate_CorporateSiteAspx">
            <summary>
              Looks up a localized string similar to Corporate site (ASPX version).
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.WebTemplate_DancingGoat">
            <summary>
              Looks up a localized string similar to Dancing Goat.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.WebTemplate_EcommerceSite">
            <summary>
              Looks up a localized string similar to E-commerce Site.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.WebTemplate_IntranetPortal">
            <summary>
              Looks up a localized string similar to Intranet Portal.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.WebTemplate_PersonalSite">
            <summary>
              Looks up a localized string similar to Personal Site.
            </summary>
        </member>
        <member name="P:InstallationHelper.Resources.Localization.WinAppHelper_WinAppName">
            <summary>
              Looks up a localized string similar to Kentico {0} {1}.
            </summary>
        </member>
        <member name="T:InstallationHelper.ServicesHelper">
            <summary>
            Manages CMS services.
            </summary>
        </member>
        <member name="M:InstallationHelper.ServicesHelper.LoadCMSServices(System.String)">
            <summary>
            Returns dictionary with installed services
            </summary>
            <param name="webFolder">Path to web folder</param>
        </member>
        <member name="M:InstallationHelper.ServicesHelper.GetApplicationSettingValue(System.String,System.String)">
            <summary>
            Returns application settings key from web.config.
            </summary>
            <param name="configPath">Web.config file path</param>
            <param name="settingsKey">Application settings key</param>
        </member>
        <member name="T:InstallationHelper.XSLTHelper">
            <summary>
            Class provides XSLT transformation.
            </summary>
        </member>
        <member name="M:InstallationHelper.XSLTHelper.TransformXml(System.String,System.String,System.String)">
            <summary>
            Transforms XML using XSLT.
            </summary>
            <param name="inputXmlFile">Input XML file</param>
            <param name="outputXmlFile">Output XML file</param>
            <param name="xslt">Style sheet transformation</param>
        </member>
        <member name="T:InstallationHelper.ZipHelper">
            <summary>
            Class for work with ZIP archive.
            </summary>
        </member>
        <member name="M:InstallationHelper.ZipHelper.ExtractZipFile(System.String,System.String)">
            <summary>
            Extracts specified archive to output folder.
            </summary>
            <param name="archiveFileName">Archive file name</param>
            <param name="outputFolder">Output folder</param>
        </member>
        <member name="T:InstallationHelper.AbstractSetupAttribute">
            <summary>
            Structure for storing XML attribute name, its value and list of allowed values for simple validation.
            </summary>
        </member>
        <member name="M:InstallationHelper.AbstractSetupAttribute.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Name of XML node</param>
        </member>
        <member name="M:InstallationHelper.AbstractSetupAttribute.CreateXmlAttribute(System.Xml.XmlDocument)">
            <summary>
            Creates XML attribute based on SetupAttribute structure.
            </summary>
            <param name="doc">XML document</param>
        </member>
        <member name="M:InstallationHelper.AbstractSetupAttribute.ValidateAttribute">
            <summary>
            Checks if attribute value is valid.
            </summary>
        </member>
        <member name="P:InstallationHelper.AbstractSetupAttribute.Name">
            <summary>
             Name of the attribute.
            </summary>
        </member>
        <member name="P:InstallationHelper.AbstractSetupAttribute.StringValue">
            <summary>
            String representation of attribute value.
            </summary>
        </member>
        <member name="P:InstallationHelper.AbstractSetupAttribute.WholeLine">
            <summary>
            Line from XML file.
            </summary>
        </member>
        <member name="P:InstallationHelper.AbstractSetupAttribute.Node">
            <summary>
            Corresponding XML node.
            </summary>
        </member>
        <member name="T:InstallationHelper.Component">
            <summary>
            Class for storing info for each component (codename, destination path, source paths, files to remove).
            </summary>
        </member>
        <member name="M:InstallationHelper.Component.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:InstallationHelper.Component.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.String,System.Collections.Generic.List{System.String},System.Boolean,System.Collections.Generic.List{System.String},System.Collections.Generic.HashSet{System.String})">
            <summary>
            Constructor.
            </summary>
            <param name="codeName">Code name</param>
            <param name="paths">[Key: Destination path, Value: List of source paths]</param>
            <param name="moduleFile">Some file or folder from module</param>
            <param name="pathsToRemove">List of files to remove (asterisk  ".*" in name is resolved to ".dll" and ".xml"</param>
            <param name="isRequired">Whether the component can be removed from installation.</param>
            <param name="dependsOn">Collection of components the current module depends on.</param>
            <param name="excludedFiles">Files, that can't be included in project file.</param>
        </member>
        <member name="P:InstallationHelper.Component.CodeName">
            <summary>
            Code name
            </summary>
        </member>
        <member name="P:InstallationHelper.Component.Paths">
            <summary>
            [Key: Destination path, Value: List of source paths]
            </summary>
        </member>
        <member name="P:InstallationHelper.Component.SourceToDestinationPaths">
            <summary>
            [Key: Source path, Value: Destination path]
            </summary>
        </member>
        <member name="P:InstallationHelper.Component.ExcludedFromProject">
            <summary>
            Files that can't be added to project file.
            </summary>
        </member>
        <member name="P:InstallationHelper.Component.ModuleFile">
            <summary>
            File from module
            </summary>
        </member>
        <member name="P:InstallationHelper.Component.PathsToRemove">
            <summary>
            Paths/files to remove
            </summary>
        </member>
        <member name="P:InstallationHelper.Component.IsRequired">
            <summary>
            Specifies whether the node can be excluded from installation.
            </summary>
        </member>
        <member name="P:InstallationHelper.Component.ResourceStringPrefix">
            <summary>
            Prefix used for localizing name of component.
            </summary>
        </member>
        <member name="P:InstallationHelper.Component.ResourceString">
            <summary>
            Resource key used for translation of display name.
            </summary>
        </member>
        <member name="P:InstallationHelper.Component.Name">
            <summary>
            Display name.
            </summary>
        </member>
        <member name="P:InstallationHelper.Component.DependsOn">
            <summary>
            Collection of components the current module depends on.
            </summary>
        </member>
        <member name="T:InstallationHelper.ComponentEqualityComparer">
            <summary>
            Compares two components.
            </summary>
        </member>
        <member name="M:InstallationHelper.ComponentEqualityComparer.Equals(InstallationHelper.Component,InstallationHelper.Component)">
            <summary>
            Compares two given components.
            </summary>
            <param name="x">First component to compare</param>
            <param name="y">Second component to compare</param>
            <returns>TRUE if components are equal otherwise false.</returns>
        </member>
        <member name="M:InstallationHelper.ComponentEqualityComparer.GetHashCode(InstallationHelper.Component)">
            <summary>
            Returns hash code for the given component.
            </summary>
            <param name="obj">Component to get hash code for</param>
            <returns>Hash code for the given component</returns>
        </member>
        <member name="T:InstallationHelper.ComponentSet">
            <summary>
            Collection of components.
            </summary>
        </member>
        <member name="M:InstallationHelper.ComponentSet.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:InstallationHelper.ComponentSet.#ctor(System.Collections.Generic.IEnumerable{InstallationHelper.Component})">
            <summary>
            Constructor initialized by existing collection
            </summary>
            <param name="collection">Collection of components</param>
        </member>
        <member name="T:InstallationHelper.DictionaryComponent">
            <summary>
            Class representing dictionary component.
            </summary>
        </member>
        <member name="M:InstallationHelper.DictionaryComponent.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.String,System.Collections.Generic.List{System.String},System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Constructor.
            </summary>
            <param name="codeName">Code name</param>
            <param name="paths">[Key: Destination path, Value: List of source paths]</param>
            <param name="moduleFile">Some file or folder from module</param>
            <param name="pathsToRemove">List of files to remove (asterisk  ".*" in name is resolved to ".dll" and ".xml"</param>
            <param name="isRequired">Whether the component can be removed from installation.</param>
            <param name="dependsOn">Collection of components the current module depends on.</param>
        </member>
        <member name="P:InstallationHelper.DictionaryComponent.ResourceStringPrefix">
            <summary>
            Prefix used for localizing name of component.
            </summary>
        </member>
        <member name="P:InstallationHelper.DictionaryComponent.ResourceString">
            <summary>
            Resource key used for translation of display name.
            </summary>
        </member>
        <member name="T:InstallationHelper.InstallationCatalog">
            <summary>
            Class containing lists of components to be installed/removed etc.
            </summary>
        </member>
        <member name="M:InstallationHelper.InstallationCatalog.#ctor(InstallationHelper.ComponentProvider)">
            <summary>
            Default constructor.
            </summary>
            <param name="componentProvider">Object used for manipulation with installed components.</param>
        </member>
        <member name="M:InstallationHelper.InstallationCatalog.InvalidateCatalog">
            <summary>
            Makes all installation catalogs invalid so that they can be reinitialized next time they are accessed.
            </summary>
        </member>
        <member name="M:InstallationHelper.InstallationCatalog.UpdateCatalog(InstallationHelper.ComponentSet)">
            <summary>
            Updates installation catalog (collections of components).
            </summary>
            <param name="newList">New components configuration</param>
        </member>
        <member name="M:InstallationHelper.InstallationCatalog.EnsureCatalog">
            <summary>
            Ensures that all catalogs are initialized before accessed.
            </summary>
        </member>
        <member name="P:InstallationHelper.InstallationCatalog.ComponentProvider">
            <summary>
            Gets or sets object used for manipulation with installed components.
            </summary>
        </member>
        <member name="P:InstallationHelper.InstallationCatalog.CatalogIsInitialized">
            <summary>
            Gets whether the catalog has been initialized at least once.
            </summary>
        </member>
        <member name="P:InstallationHelper.InstallationCatalog.ComponentsToAdd">
            <summary>
            List of components that will be added to installation.
            </summary>
        </member>
        <member name="P:InstallationHelper.InstallationCatalog.ComponentsThatRemain">
            <summary>
            List of components that will remain untouched.
            </summary>
        </member>
        <member name="P:InstallationHelper.InstallationCatalog.ComponentsToRemove">
            <summary>
            List of components that will be deleted.
            </summary>
        </member>
        <member name="T:InstallationHelper.LicenseSetupItem">
            <summary>
            Setup item representing license.
            </summary>
        </member>
        <member name="T:InstallationHelper.AbstractSetupItem">
            <summary>
            Class for storing information for items in modules section, licenses section and website section.
            </summary>
        </member>
        <member name="F:InstallationHelper.AbstractSetupItem.ATTR_NAME">
            <summary>
            Name of XML attribute Name.
            </summary>
        </member>
        <member name="F:InstallationHelper.AbstractSetupItem.ATTR_OPERATION">
            <summary>
            Name of XML attribute Operation.
            </summary>
        </member>
        <member name="M:InstallationHelper.AbstractSetupItem.ValidateAttributes(InstallationHelper.AbstractSetupAttribute@)">
            <summary>
            Checks if attribute value is valid. Returns invalid attribute.
            </summary>
            <param name="attribute">Validated setup attribute.</param>
        </member>
        <member name="P:InstallationHelper.AbstractSetupItem.Name">
            <summary>
            Name of item.
            </summary>
        </member>
        <member name="P:InstallationHelper.AbstractSetupItem.Operation">
            <summary>
            Operation to be performed with the item.
            </summary>
        </member>
        <member name="M:InstallationHelper.LicenseSetupItem.LoadAttributes(System.Xml.XmlNode)">
            <summary>
            Loads attributes from given node.
            </summary>
            <param name="node">XML node to load attributes from.</param>
        </member>
        <member name="M:InstallationHelper.LicenseSetupItem.SaveAttributes(System.Xml.XmlDocument,System.Xml.XmlNode,System.String)">
            <summary>
            Saves attributes from license setup item to given node.
            </summary>
            <param name="doc">XML document</param>
            <param name="node">Node</param>
            <param name="parentName">Name of parent XML element</param>
        </member>
        <member name="P:InstallationHelper.LicenseSetupItem.LicenseDomain">
            <summary>
            Gets or sets the domain to which the license applies.
            </summary>
        </member>
        <member name="P:InstallationHelper.LicenseSetupItem.License">
            <summary>
            License value.
            </summary>
        </member>
        <member name="T:InstallationHelper.ModuleComponent">
            <summary>
            Class representing module component.
            </summary>
        </member>
        <member name="M:InstallationHelper.ModuleComponent.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.String,System.Collections.Generic.List{System.String},System.Boolean,System.Collections.Generic.List{System.String},System.Collections.Generic.HashSet{System.String})">
            <summary>
            Constructor.
            </summary>
            <param name="codeName">Code name</param>
            <param name="paths">[Key: Destination path, Value: List of source paths]</param>
            <param name="moduleFile">Some file or folder from module</param>
            <param name="pathsToRemove">List of files to remove (asterisk  ".*" in name is resolved to ".dll" and ".xml"</param>
            <param name="isRequired">Whether the component can be removed from installation.</param>
            <param name="dependsOn">Collection of components the current module depends on.</param>
            <param name="excludedFiles">Files, that can't be included in project file.</param>
        </member>
        <member name="P:InstallationHelper.ModuleComponent.ResourceStringPrefix">
            <summary>
            Prefix used for localizing name of component.
            </summary>
        </member>
        <member name="T:InstallationHelper.ModuleSetupItem">
            <summary>
            Setup item representing installed module.
            </summary>
        </member>
        <member name="M:InstallationHelper.ModuleSetupItem.ValidateAttributes(InstallationHelper.AbstractSetupAttribute@)">
            <summary>
            Checks if attribute value is valid. Returns invalid attribute.
            </summary>
            <param name="attribute">Validated setup attribute.</param>
        </member>
        <member name="M:InstallationHelper.ModuleSetupItem.LoadAttributes(System.Xml.XmlNode)">
            <summary>
            Loads attributes name and operation from given XML node.
            </summary>
            <param name="node">XML node containing attributes for this item.</param>
        </member>
        <member name="P:InstallationHelper.ModuleSetupItem.Name">
            <summary>
            Name of item.
            </summary>
        </member>
        <member name="P:InstallationHelper.ModuleSetupItem.Operation">
            <summary>
            Operation to be performed with the item.
            </summary>
        </member>
        <member name="T:InstallationHelper.WebProjectItem">
            <summary>
            Information for one instance.
            </summary>
        </member>
        <member name="M:InstallationHelper.WebProjectItem.#ctor(System.String,System.String,System.String,System.DateTime,System.Int32,System.String,System.Guid,WinAppFoundation.NETVersionEnum,System.Boolean,System.String)">
            <summary>
            Initializes instance with parameters.
            </summary>
            <param name="url">URL</param>
            <param name="name">Name</param>
            <param name="version">Version</param>
            <param name="registered">Indicates if instance is registered</param>
            <param name="currentHotfix">Number of hotfix</param>
            <param name="path">Path</param>
            <param name="guid">GUID</param>
            <param name="netVersion">.NET version</param>
            <param name="showList">ShowList flag</param>
            <param name="displayVersion">Display version.</param>
        </member>
        <member name="P:InstallationHelper.WebProjectItem.URL">
            <summary>
            URL.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectItem.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectItem.Version">
            <summary>
            Version.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectItem.DisplayVersion">
            <summary>
            Version when displaying in site list.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectItem.Registered">
            <summary>
            Indicates if instance is registered.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectItem.CurrentHotfix">
            <summary>
            Number of current hotfix.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectItem.FailedHotfixDetection">
            <summary>
            Indicates if detection of hotfix was failed.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectItem.Path">
            <summary>
            Physical path of instance.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectItem.FailedPath">
            <summary>
            Failed path.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectItem.GUID">
            <summary>
            GUID.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectItem.NetVersion">
            <summary>
            .NET version.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectItem.ShowList">
            <summary>
            Indicates if show list.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectItem.RemoveInfo">
            <summary>
            Gets information needed to remove project.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectItem.IsValid">
            <summary>
            Web project item is valid.
            </summary>
        </member>
        <member name="T:InstallationHelper.WebProjectList">
            <summary>
            Class for managing list of installed instances.
            </summary>
        </member>
        <member name="F:InstallationHelper.WebProjectList.COL_GUID">
            <summary>
            Column name for GUID.
            </summary>
        </member>
        <member name="F:InstallationHelper.WebProjectList.COL_URL">
            <summary>
            Column name for URL.
            </summary>
        </member>
        <member name="F:InstallationHelper.WebProjectList.COL_NAME">
            <summary>
            Column name for instance name.
            </summary>
        </member>
        <member name="F:InstallationHelper.WebProjectList.COL_VERSION">
            <summary>
            Column name for major version.
            </summary>
        </member>
        <member name="F:InstallationHelper.WebProjectList.COL_REGISTERED">
            <summary>
            Column name for creation date.
            </summary>
        </member>
        <member name="F:InstallationHelper.WebProjectList.COL_CURRENT_HOTFIX">
            <summary>
            Column name for hotfix number.
            </summary>
        </member>
        <member name="F:InstallationHelper.WebProjectList.COL_PATH">
            <summary>
            Column name with path to instance.
            </summary>
        </member>
        <member name="F:InstallationHelper.WebProjectList.COL_DOWNLOADED">
            <summary>
            Column name with "downloaded" flag.
            </summary>
        </member>
        <member name="F:InstallationHelper.WebProjectList.COL_SELECTION">
            <summary>
            Column name with "selected" flag (checkbox).
            </summary>
        </member>
        <member name="F:InstallationHelper.WebProjectList.INSTANCES_LIST_FILE">
            <summary>
            Path to file containing information for all locally installed instances ("kim.xml").
            </summary>
        </member>
        <member name="M:InstallationHelper.WebProjectList.#ctor(InstallationHelper.CMSVersion,InstallationHelper.CMSVersion)">
            <summary>
            Constructor.
            </summary>
            <param name="minimalProjectVersion">Minimal project version. Project with lower versions will be ignored.</param>
            <param name="maximalProjectVersion">Maximal project version. Project with higher versions will be ignored.</param>
        </member>
        <member name="M:InstallationHelper.WebProjectList.AddItem(System.Guid,System.String,System.String,System.String,System.DateTime,System.String,System.Int32,WinAppFoundation.NETVersionEnum,System.Boolean,System.String)">
            <summary>
            Adds new item to the list.
            </summary>
            <param name="guid">Unique identifier (GUID)</param>
            <param name="url">URL</param>
            <param name="name">Name</param>
            <param name="version">Version</param>
            <param name="registered">Creation date</param>
            <param name="path">Path</param>
            <param name="currentHotfix">Current hotfix version</param>
            <param name="netVersion">Version of .NET</param>
            <param name="showList"> If TRUE, a dialog box with available web sites of the particular instance is displayed after clicking "Browse" button (useful for multi-site instances).</param>
            <param name="displayVersion">Display version.</param>
        </member>
        <member name="M:InstallationHelper.WebProjectList.UpdateItem(System.Guid,System.String,System.String,System.String,System.DateTime,System.String,System.Int32,WinAppFoundation.NETVersionEnum,System.Boolean)">
            <summary>
            Updates existing item in the list.
            </summary>
            <param name="guid">Unique identifier (GUID)</param>
            <param name="url">URL</param>
            <param name="name">Name</param>
            <param name="version">Version</param>
            <param name="registered">Creation date</param>
            <param name="path">Path</param>
            <param name="currentHotfix">Current hotfix version</param>
            <param name="netVersion">.NET version</param>
            <param name="showList"> If TRUE, a dialog box with available web sites of the particular instance is displayed after clicking "Browse" button (useful for multi-site instances).</param>
        </member>
        <member name="M:InstallationHelper.WebProjectList.SelectItem(System.Guid)">
            <summary>
            Finds item with given guid.
            </summary>
            <param name="guid">Guid</param>
        </member>
        <member name="M:InstallationHelper.WebProjectList.SelectItemsByVersion(InstallationHelper.CMSVersion)">
            <summary>
            Returns list of items for the given version.
            </summary>
            <param name="version">Version</param>
        </member>
        <member name="M:InstallationHelper.WebProjectList.SelectItems(System.Collections.Generic.List{System.Guid},System.Boolean)">
            <summary>
            Returns item(s) for specified GUID(s).
            </summary>
            <param name="guids">List of GUIDs</param>
            <param name="returnAllIfNullOrEmpty">If TRUE, all projects are returned when guid list is NULL or empty</param>
        </member>
        <member name="M:InstallationHelper.WebProjectList.SelectHotfixItems(System.String,System.Int32,System.String,System.Collections.Generic.List{System.Guid})">
            <summary>
            Returns list of instances for which the given hotfix can be applied to.
            </summary>
            <param name="version">Main version for which the hotfix can by applied to (e.g. 7.0, 8.0).</param>
            <param name="hotfixNumber">Hotfix number for which the hotfix can by applied to.</param>
            <param name="availOnlyFor">Hotfix is available only for these hotfix versions (list of hotfix numbers separated by semicolon)</param>
            <param name="filteredItems">Optional. If used only these instances will be taken in to consideration.</param>
        </member>
        <member name="M:InstallationHelper.WebProjectList.SelectUpgradeItems(System.String,System.String,System.Collections.Generic.List{System.Guid})">
            <summary>
            Returns list of instances for which the given upgrade can be applied to.
            </summary>
            <param name="fromVersion">Major version for which the upgrade can by applied to</param>
            <param name="availOnlyFor">Upgrade is available only for these hotfix versions (list of hotfix numbers separated by semicolon)</param>
            <param name="filteredItems">Optional. If used only these instances will be taken in to consideration.</param>
        </member>
        <member name="M:InstallationHelper.WebProjectList.DeleteInstances(System.Collections.Generic.List{InstallationHelper.WebProjectItem})">
            <summary>
            Deletes all instances with the given GUIDs.
            </summary>
            <param name="instances">Instances to delete.</param>
        </member>
        <member name="M:InstallationHelper.WebProjectList.DeleteItem(System.Guid)">
            <summary>
            Delete item with the given guid.
            </summary>
            <param name="guid">Guid</param>
        </member>
        <member name="M:InstallationHelper.WebProjectList.GetTable">
            <summary>
            Returns list as a data table.
            </summary>
        </member>
        <member name="M:InstallationHelper.WebProjectList.SaveList(System.String)">
            <summary>
            Stores current list to file.
            </summary>
            <param name="fileName">Name of the file</param>
        </member>
        <member name="M:InstallationHelper.WebProjectList.LoadList(System.String)">
            <summary>
            Loads list from file.
            </summary>
            <param name="fileName">File</param>
        </member>
        <member name="M:InstallationHelper.WebProjectList.GetAllGuids">
            <summary>
            Returns all instance unique identifiers (GUIDs).
            </summary>
        </member>
        <member name="M:InstallationHelper.WebProjectList.Clear">
            <summary>
            Remove all items form the list.
            </summary>
        </member>
        <member name="M:InstallationHelper.WebProjectList.AddItem(InstallationHelper.WebProjectItem)">
            <summary>
            Adds new item to the list.
            </summary>
            <param name="item">Item</param>
        </member>
        <member name="M:InstallationHelper.WebProjectList.DeleteInstance(InstallationHelper.WebProjectItem)">
            <summary>
            Delete instance (i.e. all items with the same path).
            </summary>
            <param name="webProject">WebProject instance to delete.</param>
        </member>
        <member name="M:InstallationHelper.WebProjectList.RaiseChangeEvent">
            <summary>
            Raises "OnChange" event.
            </summary>
        </member>
        <member name="M:InstallationHelper.WebProjectList.GetTable(System.String[])">
            <summary>
            Returns list as a data table;.
            </summary>
            <param name="cols">Columns</param>
        </member>
        <member name="M:InstallationHelper.WebProjectList.BeginUpdate">
            <summary>
            Sets object to update mode. During this mode no OnChange event is raised.
            </summary>
        </member>
        <member name="M:InstallationHelper.WebProjectList.EndUpdate">
            <summary>
            Stops update mode.
            </summary>
        </member>
        <member name="M:InstallationHelper.WebProjectList.GetElementValue(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Collections.Generic.List{System.String})">
            <summary>
            Returns value of the child element of the given item.
            </summary>
            <param name="item">Item with children</param>
            <param name="name">Name of the element to search</param>
            <param name="errMessages">Optional.</param>
        </member>
        <member name="M:InstallationHelper.WebProjectList.LoadListInternal(System.String)">
            <summary>
            Loads list from file.
            </summary>
            <param name="fileName">File</param>
        </member>
        <member name="M:InstallationHelper.WebProjectList.SaveListInternal(System.String)">
            <summary>
            Stores current list to file.
            </summary>
            <param name="fileName">Name of the file</param>
        </member>
        <member name="P:InstallationHelper.WebProjectList.MinimalProjectVersion">
            <summary>
            Minimal project version. Project with lower versions will be ignored.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectList.MaximalProjectVersion">
            <summary>
            Maximal project version. Project with higher versions will be ignored.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectList.AllProjects">
            <summary>
            All projects regardless of project version. Used for read-write operations.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectList.SupportedProjects">
            <summary>
            Projects filtered by version. Used for read-only operations.
            </summary>
        </member>
        <member name="E:InstallationHelper.WebProjectList.OnChange">
            <summary>
            Occurs when list has been changed.
            </summary>
        </member>
        <member name="T:InstallationHelper.TemplateComponent">
            <summary>
            Class representing template component.
            </summary>
        </member>
        <member name="M:InstallationHelper.TemplateComponent.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.String,System.Collections.Generic.List{System.String},System.Boolean,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="codeName">Code name</param>
            <param name="paths">[Key: Destination path, Value: List of source paths]</param>
            <param name="moduleFile">Some file or folder from module</param>
            <param name="pathsToRemove">List of files to remove (asterisk  ".*" in name is resolved to ".dll" and ".xml"</param>
            <param name="isRequired">Whether the component can be removed from installation.</param>
            <param name="dependsOn">Collection of components the current module depends on.</param>
            <param name="templatePath">Path to Template.zip package containing template data.</param>
        </member>
        <member name="P:InstallationHelper.TemplateComponent.ResourceStringPrefix">
            <summary>
            Prefix used for localizing name of component.
            </summary>
        </member>
        <member name="P:InstallationHelper.TemplateComponent.TemplatePath">
            <summary>
            Relative path to Template.zip package containing template data in instance location.
            </summary>
        </member>
        <member name="T:InstallationHelper.UICultureComponent">
            <summary>
            Class representing UI culture component.
            </summary>
        </member>
        <member name="M:InstallationHelper.UICultureComponent.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.String,System.Collections.Generic.List{System.String},System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Constructor.
            </summary>
            <param name="codeName">Code name</param>
            <param name="paths">[Key: Destination path, Value: List of source paths]</param>
            <param name="moduleFile">Some file or folder from module</param>
            <param name="pathsToRemove">List of files to remove (asterisk  ".*" in name is resolved to ".dll" and ".xml"</param>
            <param name="isRequired">Whether the component can be removed from installation.</param>
            <param name="dependsOn">Collection of components the current module depends on.</param>
        </member>
        <member name="P:InstallationHelper.UICultureComponent.ResourceStringPrefix">
            <summary>
            Prefix used for localizing name of component.
            </summary>
        </member>
        <member name="P:InstallationHelper.UICultureComponent.ResourceString">
            <summary>
            Resource key used for translation of display name.
            </summary>
        </member>
        <member name="T:InstallationHelper.PrerequisiteItem">
            <summary>
            Contains information for prerequisite
            </summary>
        </member>
        <member name="M:InstallationHelper.PrerequisiteItem.#ctor(System.String,System.String,System.String,System.String,WinAppFoundation.ArchitectureEnum,System.String,System.Int64,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="codeName">Code name</param>
            <param name="displayName">Display name</param>
            <param name="version">Version</param>
            <param name="culture">Culture</param>
            <param name="architecture">Architecture</param>
            <param name="url">URL</param>
            <param name="fileSize">File size</param>
            <param name="checksum">Checksum</param>
            <param name="arguments">Arguments used for unattended package installation.</param>
        </member>
        <member name="P:InstallationHelper.PrerequisiteItem.CodeName">
            <summary>
            Code name
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisiteItem.DisplayName">
            <summary>
            Display name
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisiteItem.Version">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisiteItem.Culture">
            <summary>
            Culture
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisiteItem.SilentInstallArguments">
            <summary>
            Arguments used for unattended package installation.
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisiteItem.Architecture">
            <summary>
            Architecture
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisiteItem.URL">
            <summary>
            URL to file to download.
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisiteItem.FileSize">
            <summary>
            File size in bytes.
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisiteItem.Extension">
            <summary>
            File extension
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisiteItem.Checksum">
            <summary>
            Checksum
            </summary>
        </member>
        <member name="T:InstallationHelper.SetupAttribute`1">
            <summary>
            Structure for storing XML attribute name, its value and list of allowed values for simple validation.
            </summary>
        </member>
        <member name="F:InstallationHelper.SetupAttribute`1.BOOLEAN_VALUES">
            <summary>
            Allowed values for boolean attribute.
            </summary>
        </member>
        <member name="M:InstallationHelper.SetupAttribute`1.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Name of XML node</param>
        </member>
        <member name="M:InstallationHelper.SetupAttribute`1.#ctor(System.String,`0,System.Xml.XmlNode)">
            <summary>
            Constructor with default value.
            </summary>
            <param name="name">Name of XML node</param>
            <param name="defaultValue">Default value if attribute is empty</param>
            <param name="node">Corresponding XML node</param>
        </member>
        <member name="M:InstallationHelper.SetupAttribute`1.GetXmlAttributeValue(System.Xml.XmlNode,System.String)">
            <summary>
            Returns value of given attribute.
            </summary>
            <param name="node">Node</param>
            <param name="name">Name of the attribute</param>
        </member>
        <member name="M:InstallationHelper.SetupAttribute`1.ConvertStringTo(System.String,`0)">
            <summary>
            Converts string to generic type.
            </summary>
            <param name="value">String value</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:InstallationHelper.SetupAttribute`1.CreateXmlAttribute(System.Xml.XmlDocument)">
            <summary>
            Creates XML attribute based on SetupAttribute structure.
            </summary>
            <param name="doc">XML document</param>
        </member>
        <member name="M:InstallationHelper.SetupAttribute`1.ValidateAttribute">
            <summary>
            Checks if attribute value is valid.
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupAttribute`1.Value">
            <summary>
            Attribute value
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupAttribute`1.StringValue">
            <summary>
            String representation of attribute value.
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupAttribute`1.DefaultValue">
            <summary>
            Default value if attribute not used
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupAttribute`1.AllowedValues">
            <summary>
            Allowed values separated by "pipe | ".
            </summary>
        </member>
        <member name="T:InstallationHelper.WebSiteSetupItem">
            <summary>
            Setup item representing installed site.
            </summary>
        </member>
        <member name="M:InstallationHelper.WebSiteSetupItem.ValidateAttributes(InstallationHelper.AbstractSetupAttribute@)">
            <summary>
            Checks if attribute value is valid. Returns name of invalid attribute.
            </summary>
        </member>
        <member name="M:InstallationHelper.WebSiteSetupItem.LoadAttributes(System.Xml.XmlNode)">
            <summary>
            Loads attributes from given XML node.
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:InstallationHelper.WebSiteSetupItem.Domain">
            <summary>
            Domain name under which the site runs.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebSiteSetupItem.DisplayName">
            <summary>
            User friendly name for the site.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebSiteSetupItem.CodeName">
            <summary>
            Codename for the site.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebSiteSetupItem.WebTemplateName">
            <summary>
            Web template name.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebSiteSetupItem.RunSite">
            <summary>
            Whether or not to run the site after installation.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebSiteSetupItem.RebuildIndexes">
            <summary>
            Whether or not to rebuild search indexes after installation.
            </summary>
        </member>
        <member name="T:InstallationHelper.EmailSender">
            <summary>
            Provides functionality for sending e-mails.
            </summary>
        </member>
        <member name="M:InstallationHelper.EmailSender.Send(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sends mail based on given arguments.
            </summary>
            <param name="eFrom">E-mail from</param>
            <param name="eTo">E-mail to</param>
            <param name="eSubject">Subject of e-mail</param>
            <param name="fileAttachment">Path to attachment</param>
            <param name="server">SMTP server address</param>
            <param name="username">SMTP server user name</param>
            <param name="password">SMTP server password</param>
            <param name="encoding">Message and subject encoding</param>
            <param name="useSSL">Whether SMTP server uses SSL</param>
            <param name="messageText">Text of the e-mail</param>
            <param name="doNotZipAttachment">Whether or not to zip the attachment</param>
            <param name="attachLogFile">Whether to attach log file</param>
        </member>
        <member name="M:InstallationHelper.EmailSender.SendEmail(System.Net.Mail.MailMessage,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Send an e-mail.
            </summary>
            <param name="message">Mail message</param>
            <param name="server">Server name</param>
            <param name="username">User name</param>
            <param name="password">Password</param>
            <param name="encoding">E-mail encoding</param>
            <param name="useSSL">Use SSL for transmission</param>
        </member>
        <member name="M:InstallationHelper.EmailSender.CompressToZip(System.String,System.String)">
            <summary>
            Creates ZIP archive from source file.
            </summary>
            <param name="sourceFile">Source file</param>
            <param name="destinationFile">Output file (ZIP)</param>
        </member>
        <member name="T:InstallationHelper.DeleteExistingEnum">
            <summary>
            Determines whether conflicting object (object with the same name) should be deleted or not.
            </summary>
        </member>
        <member name="F:InstallationHelper.DeleteExistingEnum.True">
            <summary>
            Existing object will be deleted and replaced with new one.
            </summary>
        </member>
        <member name="F:InstallationHelper.DeleteExistingEnum.False">
            <summary>
            Existing object won't be deleted and operation won't continue.
            </summary>
        </member>
        <member name="F:InstallationHelper.DeleteExistingEnum.GetUnique">
            <summary>
            New object will be stored under new unique name.
            </summary>
        </member>
        <member name="T:InstallationHelper.InstallActionEnum">
            <summary>
            Type of installation enumeration (for whole section - modules, templates etc.).
            </summary>
        </member>
        <member name="F:InstallationHelper.InstallActionEnum.InstallAll">
            <summary>
            All items will be installed
            </summary>
        </member>
        <member name="F:InstallationHelper.InstallActionEnum.RemoveAll">
            <summary>
            All items will be removed
            </summary>
        </member>
        <member name="F:InstallationHelper.InstallActionEnum.Mix">
            <summary>
            Some items will be installed and other removed
            </summary>
        </member>
        <member name="T:InstallationHelper.InstallOperationEnum">
            <summary>
            Type of operation enumeration (for particular item - one module, one template etc.).
            </summary>
        </member>
        <member name="F:InstallationHelper.InstallOperationEnum.No">
            <summary>
            Item remains untouched.
            </summary>
        </member>
        <member name="F:InstallationHelper.InstallOperationEnum.Add">
            <summary>
            Item will be added.
            </summary>
        </member>
        <member name="F:InstallationHelper.InstallOperationEnum.Remove">
            <summary>
            Item will be removed.
            </summary>
        </member>
        <member name="T:InstallationHelper.LocationEnum">
            <summary>
            Target location (local IIS, Visual Studio, remote, modify local installation).
            </summary>
        </member>
        <member name="F:InstallationHelper.LocationEnum.Local">
            <summary>
            Local IIS installation.
            </summary>
        </member>
        <member name="F:InstallationHelper.LocationEnum.VisualStudio">
            <summary>
            Visual Studio installation.
            </summary>
        </member>
        <member name="F:InstallationHelper.LocationEnum.Remote">
            <summary>
            Installation to the remote (production) server.
            </summary>
        </member>
        <member name="F:InstallationHelper.LocationEnum.Modify">
            <summary>
            Modify/repair installation
            </summary>
        </member>
        <member name="T:InstallationHelper.OnInstallationErrorEnum">
            <summary>
            Enumeration for action when error occurs.
            </summary>
        </member>
        <member name="F:InstallationHelper.OnInstallationErrorEnum.Stop">
            <summary>
            Stop action and quit.
            </summary>
        </member>
        <member name="F:InstallationHelper.OnInstallationErrorEnum.Continue">
            <summary>
            Ignore error and continue.
            </summary>
        </member>
        <member name="T:InstallationHelper.ProjectTypeEnum">
            <summary>
            Project types.
            </summary>
        </member>
        <member name="F:InstallationHelper.ProjectTypeEnum.WebSite">
            <summary>
            Web site.
            </summary>
        </member>
        <member name="F:InstallationHelper.ProjectTypeEnum.WebApplication">
            <summary>
            Web application.
            </summary>
        </member>
        <member name="F:InstallationHelper.ProjectTypeEnum.WindowsAzure">
            <summary>
            Microsoft Azure.
            </summary>
        </member>
        <member name="T:InstallationHelper.ShowProgressEnum">
            <summary>
            Determines whether to show progress or not.
            </summary>
        </member>
        <member name="F:InstallationHelper.ShowProgressEnum.No">
            <summary>
            Do not show progress.
            </summary>
        </member>
        <member name="F:InstallationHelper.ShowProgressEnum.CommandPrompt">
            <summary>
            Show progress in command line.
            </summary>
        </member>
        <member name="T:InstallationHelper.SQLAuthenticationEnum">
            <summary>
            Type of authentication.
            </summary>
        </member>
        <member name="F:InstallationHelper.SQLAuthenticationEnum.SQL">
            <summary>
            SQL Server authentication
            </summary>
        </member>
        <member name="F:InstallationHelper.SQLAuthenticationEnum.Windows">
            <summary>
            Integrated windows authentication
            </summary>
        </member>
        <member name="T:InstallationHelper.SQLOperationEnum">
            <summary>
            Type of operation for database.
            </summary>
        </member>
        <member name="F:InstallationHelper.SQLOperationEnum.New">
            <summary>
            New DB will be created.
            </summary>
        </member>
        <member name="F:InstallationHelper.SQLOperationEnum.Modify">
            <summary>
            Existing database will be modified.
            </summary>
        </member>
        <member name="T:InstallationHelper.VersionEnum">
            <summary>
            Enumeration of the target version.
            </summary>
        </member>
        <member name="F:InstallationHelper.VersionEnum.Net40">
            <summary>
            Binaries for .NET 4.0
            </summary>
        </member>
        <member name="F:InstallationHelper.VersionEnum.Net45">
            <summary>
            Binaries for .NET 4.5
            </summary>
        </member>
        <member name="F:InstallationHelper.VersionEnum.Azure45">
            <summary>
            Binaries for .NET 4.5 on Microsoft Azure
            </summary>
        </member>
        <member name="F:InstallationHelper.VersionEnum.Net46">
            <summary>
            Binaries for .NET 4.6
            </summary>
        </member>
        <member name="T:InstallationHelper.InstallationExtensions">
            <summary>
            Aggregates extension methods.
            </summary>
        </member>
        <member name="M:InstallationHelper.InstallationExtensions.IsNull``1(``0)">
            <summary>
            Finds out whether the object is null (if nullable).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:InstallationHelper.InstallationExtensions.IsDefault``1(``0)">
            <summary>
            Finds out whether object is in default state.
            </summary>
        </member>
        <member name="T:InstallationHelper.ComponentProvider">
            <summary>
            Class covering mainly operations with installed components.
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.VERSION_DATA_MACRO">
            <summary>
            Macro for version dependent data files (web.config, .sln files etc.)
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.VERSION_BIN_MACRO">
            <summary>
            Macro for version dependent binary files (*.dll)
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.WEB_CORE">
            <summary>
            Core.
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.WEB_DBSCRIPTS">
            <summary>
            Database scripts.
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.UICULTURE_ENEN">
            <summary>
            English culture
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.SPELL_ENGB">
            <summary>
            English dictionary
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.MODULES_FORMS">
            <summary>
            On-line forms module.
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.MODULES_BLOGS">
            <summary>
            Blogs module.
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.MODULES_COMMUNITY">
            <summary>
            Community module.
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.MODULES_DEPARTMENTS">
            <summary>
            Departments module.
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.MODULES_FRIENDS">
            <summary>
            Community module.
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.MODULES_GROUPS">
            <summary>
            Community module.
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.MODULES_ECOMMERCE">
            <summary>
            E-commerce module.
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.MODULES_EVENTS">
            <summary>
            Booking system module.
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.MODULES_FORUMS">
            <summary>
            Forums module.
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.MODULES_MEDIA_LIBRARY">
            <summary>
            Media library module.
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.MODULES_MESSAGE_BOARDS">
            <summary>
            Message boards module.
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.MODULES_MESSAGING">
            <summary>
            Messaging module.
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.MODULES_NEWSLETTERS">
            <summary>
            Newsletters module.
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.MODULES_NOTIFICATIONS">
            <summary>
            Notifications module.
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.MODULES_POLLS">
            <summary>
            Polls module.
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.MODULES_REPORTING">
            <summary>
            Reporting module.
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.MODULES_STAGING">
            <summary>
            Staging module.
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.MODULES_SHAREPOINT">
            <summary>
            SharePoint module.
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.MODULES_WEBDAV">
            <summary>
            WebDAV module.
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.MODULES_ONLINE_MARKETING">
            <summary>
            On-line marketing module.
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.MODULES_CONTROLS_EXAMPLES">
            <summary>
            Controls examples.
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.MODULES_WIN_SERVICES">
            <summary>
            Windows services.
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.MODULES_CHAT">
            <summary>
            Chat module.
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.MODULES_SOCIAL_MARKETING">
            <summary>
            Social media module.
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.MODULES_STRANDS_RECOMMENDER">
            <summary>
            Strands recommender module.
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.MODULES_WIF_INTEGRATION">
            <summary>
            Windows Identity Foundation integration module.
            </summary>
        </member>
        <member name="F:InstallationHelper.ComponentProvider.MODULES_PERSONAS">
            <summary>
            Personas module.
            </summary>
        </member>
        <member name="M:InstallationHelper.ComponentProvider.#ctor(InstallationHelper.InstallationProfile,System.String)">
            <summary>
            Initializes helper.
            </summary>
            <param name="profile">Installation configuration object</param>
            <param name="applicationExecutablePath">Path of application executable</param>
        </member>
        <member name="M:InstallationHelper.ComponentProvider.GetDir(System.String,System.Boolean)">
            <summary>
            Returns files or directories (full path) of the given path.
            </summary>
            <param name="path">Path</param>
            <param name="files">Returns files instead of folders</param>
        </member>
        <member name="M:InstallationHelper.ComponentProvider.DirExists(System.String,System.Boolean)">
            <summary>
            Returns true if install
            </summary>
            <param name="path"></param>
            <param name="files"></param>
            <returns></returns>
        </member>
        <member name="M:InstallationHelper.ComponentProvider.GetTemplateDir(System.String)">
            <summary>
            Gets all available templates from source files.
            </summary>
            <param name="srcPath">Source path (webinstaller path)</param>
        </member>
        <member name="M:InstallationHelper.ComponentProvider.GetSpellDir(System.String)">
            <summary>
            Gets all available spellchecker dictionaries from source files.
            </summary>
            <param name="srcPath">Source path (webinstaller path)</param>
        </member>
        <member name="M:InstallationHelper.ComponentProvider.GetUICultureDir(System.String)">
            <summary>
            Gets all available UI cultures from source files.
            </summary>
            <param name="srcPath">Source path (webinstaller path)</param>
        </member>
        <member name="M:InstallationHelper.ComponentProvider.DeletePhysicalPath(System.String,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Removes all files and directories in the given directory (one by one).
            Returns TRUE if directory contain any ignored file(s).
            </summary>
            <param name="path">Path to remove</param>
            <param name="ignoreErrors">If true all exceptions are ignored</param>
            <param name="ignoredFiles">List of files that can be ignored when deleting fail</param>
        </member>
        <member name="M:InstallationHelper.ComponentProvider.GetListOfInstallableComponents``1">
            <summary>
            Gets collection of components of given type.
            </summary>
            <typeparam name="T">Type of components to return</typeparam>
            <returns>Collection of components</returns>
        </member>
        <member name="M:InstallationHelper.ComponentProvider.GetListOfInstalledComponents(System.String,System.String)">
            <summary>
            Returns list of installable or installed components.
            </summary>
            <param name="path">Path to target (if null, list of installable components is returned)</param>
            <param name="startsWith">Only lists components starting with this string</param>
        </member>
        <member name="M:InstallationHelper.ComponentProvider.GetItemsToRemove(InstallationHelper.Component)">
            <summary>
            Returns paths to remove for the specified component.
            </summary>
            <param name="component">Component</param>
        </member>
        <member name="M:InstallationHelper.ComponentProvider.GetDependenciesEnumerable(InstallationHelper.Component)">
            <summary>
            Traverses dependency tree and returns collection of all components visited.
            </summary>
            <param name="component">Root component.</param>
        </member>
        <member name="M:InstallationHelper.ComponentProvider.CheckComponentDirectories(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Checks whether directories obtaining selected components exist.
            </summary>
            <param name="sourceDirectories">Source directories for</param>
            <returns>Error message if some directory is missing.</returns>
        </member>
        <member name="M:InstallationHelper.ComponentProvider.GetComponent``1(System.String)">
            <summary>
            Gets component by name and type.
            </summary>
            <param name="componentName">Name of component to return</param>
            <returns>Component with corresponding name and type</returns>
        </member>
        <member name="M:InstallationHelper.ComponentProvider.IsSubset(InstallationHelper.ComponentSet,InstallationHelper.ComponentSet)">
            <summary>
            Checks if all <paramref name="subList"/> is subset of <paramref name="componentList"/>.
            </summary>
            <param name="subList">Components to check</param>
            <param name="componentList">Components list</param>
        </member>
        <member name="M:InstallationHelper.ComponentProvider.GetInstalledComponents(System.String)">
            <summary>
            Returns list of installed components.
            </summary>
            <param name="path">Target folder</param>
        </member>
        <member name="M:InstallationHelper.ComponentProvider.GetAvailableComponents">
            <summary>
            Returns collection of all available components.
            </summary>
        </member>
        <member name="M:InstallationHelper.ComponentProvider.GetAvailableTemplates">
            <summary>
            Returns collection of available web templates.
            </summary>
        </member>
        <member name="M:InstallationHelper.ComponentProvider.GetAvailableUICultures">
            <summary>
            Returns collection of available cultures.
            </summary>
        </member>
        <member name="M:InstallationHelper.ComponentProvider.GetAvailableDictionaries">
            <summary>
            Returns collection of available dictionaries.
            </summary>
        </member>
        <member name="M:InstallationHelper.ComponentProvider.GetAvailableModules">
            <summary>
            Returns collection of available modules.
            </summary>
        </member>
        <member name="M:InstallationHelper.ComponentProvider.GetDirectories(InstallationHelper.Component,System.String,System.String)">
            <summary>
            Returns source to destination paths for specified component.
            </summary>
            <param name="component">Desired component</param>
            <param name="baseSourcePath">Source path (webinstaller path)</param>
            <param name="baseDestinationPath">Destination path (webapplication path)</param>
        </member>
        <member name="M:InstallationHelper.ComponentProvider.GetSourceDirectories(InstallationHelper.ComponentSet,System.String)">
            <summary>
            Returns source directories/files for specified components.
            </summary>
            <param name="components">List of components</param>
            <param name="baseSourcePath">Base path (will be prepended to all directories)</param>
        </member>
        <member name="M:InstallationHelper.ComponentProvider.GetDirectoriesToRemove(InstallationHelper.ComponentSet,System.String)">
            <summary>
            Returns paths of directories/files to remove for the specified list of components.
            </summary>
            <param name="componentsList">List of components</param>
            <param name="baseDestinationPath">Destination path (webapplication path)</param>
        </member>
        <member name="M:InstallationHelper.ComponentProvider.ValidateDependencies">
            <summary>
            Validates given list of components.
            </summary>
        </member>
        <member name="M:InstallationHelper.ComponentProvider.GetDependants(System.String)">
            <summary>
            Returns a collection of modules which need <paramref name="componentName"/> to be installed.
            </summary>
            <param name="componentName">Dependency component</param>
        </member>
        <member name="M:InstallationHelper.ComponentProvider.GetDependencies(InstallationHelper.Component)">
            <summary>
            Returns a collection of modules which <paramref name="component"/> needs to be installed.
            </summary>
            <param name="component">Dependant component</param>
        </member>
        <member name="P:InstallationHelper.ComponentProvider.ChatModule">
            <summary>
            Gets chat module.
            </summary>
        </member>
        <member name="P:InstallationHelper.ComponentProvider.MinimalInstallation">
            <summary>
            Collection of components necessary for minimal installation.
            </summary>
        </member>
        <member name="P:InstallationHelper.ComponentProvider.Profile">
            <summary>
            Used for storing installation settings.
            </summary>
        </member>
        <member name="P:InstallationHelper.ComponentProvider.Components">
            <summary>
            Gets all installable components.
            </summary>
        </member>
        <member name="P:InstallationHelper.ComponentProvider.AllInstallationFiles">
            <summary>
            Returns list of all files contained in the installation stored in InstallerFileList.txt
            </summary>
        </member>
        <member name="P:InstallationHelper.ComponentProvider.ApplicationExecutablePath">
            <summary>
            Path of application executable.
            </summary>
        </member>
        <member name="P:InstallationHelper.ComponentProvider.OldInstallation">
            <summary>
            Gets collection of components contained in existing installation.
            </summary>
        </member>
        <member name="P:InstallationHelper.ComponentProvider.InstallationCatalog">
            <summary>
            Gets or sets object containing lists of components to be (un)installed.
            </summary>
        </member>
        <member name="T:InstallationHelper.CMSFilesHelper">
            <summary>
            Class provides basic manipulation with App directory structure.
            </summary>
        </member>
        <member name="M:InstallationHelper.CMSFilesHelper.GetFilesCount(System.String,System.Boolean)">
            <summary>
            Returns the files count within specified directory.
            </summary>
            <param name="dir">Directory path or file</param>
            <param name="recursive">Recursive counting</param>
        </member>
        <member name="M:InstallationHelper.CMSFilesHelper.NormalizePath(System.String)">
            <summary>
            Includes backslash at the end of the path.
            </summary>
            <param name="path">Path</param>
        </member>
        <member name="M:InstallationHelper.CMSFilesHelper.GetPathToWebConfig(System.String)">
            <summary>
            Returns path to web site root.
            </summary>
            <param name="path">Path to root or source code path</param>
        </member>
        <member name="M:InstallationHelper.CMSFilesHelper.GetSolutionFilePath(System.String)">
            <summary>
            Returns path to solution file according to project type.
            </summary>
            <param name="path">Path to root or source code path</param>
        </member>
        <member name="M:InstallationHelper.CMSFilesHelper.GetPathToHotfixTxtFile(System.String)">
            <summary>
            Returns path to hotfix.txt file.
            </summary>
            <param name="path">Path to root of web project (not root of solution)</param>
        </member>
        <member name="M:InstallationHelper.CMSFilesHelper.GetProjectType(System.String)">
            <summary>
            Gets type of project at the specified path.
            </summary>
            <param name="path">Path of the project</param>
        </member>
        <member name="M:InstallationHelper.CMSFilesHelper.GetHotfixVersionFromFile(System.String)">
            <summary>
            Returns hotfix number from hotfix file info.
            </summary>
            <param name="path">Path to a web project</param>
        </member>
        <member name="M:InstallationHelper.CMSFilesHelper.SetHotfixVersionFile(System.String,System.Int32)">
            <summary>
            Writes hotfix number into hotfix file.
            </summary>
            <param name="pathToWeb">Path to a web project</param>
            <param name="hotfixVersion">Hotfix version</param>
        </member>
        <member name="M:InstallationHelper.CMSFilesHelper.GetTargetVersion(System.String,System.String)">
            <summary>
            Returns CMS version.
            </summary>
            <param name="targetPath">Path to a web project.</param>
            <param name="referenceDllFolder">Folder to look for reference DLL.</param>
        </member>
        <member name="M:InstallationHelper.CMSFilesHelper.CheckVersion(System.String)">
            <summary>
            Returns true if installed cms has correct version.
            </summary>
            <param name="targetPath">Web application path</param>
        </member>
        <member name="M:InstallationHelper.CMSFilesHelper.GetDefaultSetupPath">
            <summary>
            Returns default path to setup files.
            </summary>
        </member>
        <member name="M:InstallationHelper.CMSFilesHelper.GetInstalledInstances">
            <summary>
            Returns list of installed instances on local computer that match current version.
            </summary>
        </member>
        <member name="M:InstallationHelper.CMSFilesHelper.CopyFileToRandomFile(System.String)">
            <summary>
            Copies source file to current directory with random filename.
            Returns name of newly created file.
            </summary>
            <param name="sourceFile">Source file</param>
        </member>
        <member name="M:InstallationHelper.CMSFilesHelper.CopyDirectoryAsync(System.String,System.String,System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Copy directory <paramref name="from"/> to <paramref name="to"/> using given background worker.
            Reports progres to given worker.
            </summary>
            <param name="from">Source directory</param>
            <param name="to">Target directory</param>
            <param name="sender">Background worker to report progress to.</param>
            <param name="e">Background worker arguments for setting cancellation token.</param>
        </member>
        <member name="M:InstallationHelper.CMSFilesHelper.RestoreRandomFileToFile(System.String,System.String)">
            <summary>
            Restores random file to target file and removes random file.
            </summary>
            <param name="sourceFile">Source file</param>
            <param name="targetFile">Target file</param>
        </member>
        <member name="M:InstallationHelper.CMSFilesHelper.InitHotfixVersion(InstallationHelper.CMSVersion@,System.String)">
            <summary>
            Reads version from specified file.
            </summary>
            <param name="version">Version object to initialize</param>
            <param name="path">Path to the web project</param>
        </member>
        <member name="T:InstallationHelper.PrerequisiteListBuilder">
            <summary>
            Helps building prerequisites list from installation profile and packages definition.
            </summary>
        </member>
        <member name="M:InstallationHelper.PrerequisiteListBuilder.#ctor(InstallationHelper.InstallationProfile,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Basic constructor, which constructs an instance of Prerequisite list builder from an Installation profile. Some source of packages definition must be given, so 
            either <paramref name="packagesString"/> or <paramref name="packagesFilePath"/> must be given, in other case, embedded packages definition will be used.
            </summary>
            <param name="profile">Input Installation profile</param>
            <param name="packagesFilePath">Relative or absolute file path to XML packages definition</param>
            <param name="packagesString">Single string representing packages definition</param>
            <param name="iisRequired">IIS installation required</param>
            <param name="frameworkRequired">Framework installation required</param>
            <param name="databaseRequired">DB installation required</param>
        </member>
        <member name="M:InstallationHelper.PrerequisiteListBuilder.BuildPrerequisitesList">
            <summary>
            Builds list of packages. 
            </summary>
            <returns>Read only collection of prerequisites.</returns>
            <remarks>Result will be empty if installation location is not local machine.</remarks>
        </member>
        <member name="P:InstallationHelper.PrerequisiteListBuilder.Profile">
            <summary>
            Installation profile, which is a base for prerequisites building.
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisiteListBuilder.PackagesPath">
            <summary>
            Relative path to XML file with packages definition.
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisiteListBuilder.PackagesString">
            <summary>
            Represents packages definition in a single string.
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisiteListBuilder.PrerequisitesHelper">
            <summary>
            Helps extracting packages from definition source.
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisiteListBuilder.IISRequired">
            <summary>
            IIS installation required.
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisiteListBuilder.FrameworkRequired">
            <summary>
            .NET installation required.
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisiteListBuilder.DatabaseRequired">
            <summary>
            Database installation required.
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisiteListBuilder.RequestedArchitecture">
            <summary>
            Primarily requested architecture of the packages.
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisiteListBuilder.RequestedCulture">
            <summary>
            Primarily requested culture of the packages.
            </summary>
        </member>
        <member name="T:InstallationHelper.PrerequisitesHelper">
            <summary>
            Provides information about installation packages based on given parameters.
            </summary>
        </member>
        <member name="F:InstallationHelper.PrerequisitesHelper.VALIDATION_SCHEMA">
            <summary>
            Name of the file with XML schema
            </summary>
        </member>
        <member name="F:InstallationHelper.PrerequisitesHelper.PACKAGES_XML">
            <summary>
            Path to embedded packages definition XML.
            </summary>
        </member>
        <member name="M:InstallationHelper.PrerequisitesHelper.#ctor(System.String,WinAppFoundation.ArchitectureEnum,System.String,System.Nullable{WinAppFoundation.ArchitectureEnum})">
            <summary>
            Constructor for Prerequisite helper. Does not load packages file automatically. To load XML file using string or file path, use LoadFile/LoadString methods.
            </summary>
            <param name="defaultCulture">Default culture. This culture is used, as a last option in package search, when requested culture is not found.</param>
            <param name="defaultArchitecture">Default architecture. This architecture is used, as a last option in package search, when requested architecture is not found.</param>
            <param name="requestedCulture">Permanently requested culture, can be overridden by calling GetItem with optional attribute culture. 
            By default set to null, which means, that default culture is requested culture.</param>
            <param name="requestedArchitecture">Permanently requested architecture, can be overridden by calling GetItem with optional attribute architecture. 
            By default set to null, which means, that default architecture is requested architecture.</param>
        </member>
        <member name="M:InstallationHelper.PrerequisitesHelper.LoadFile(System.String)">
            <summary>
            Loads and validates prerequisites info from file.
            Returns TRUE if loading succeeded.
            </summary>
            <param name="filePath">Relative or absolute path to XML file with packages(explicit). By default loads an embedded XML file.</param>
        </member>
        <member name="M:InstallationHelper.PrerequisitesHelper.LoadString(System.String)">
            <summary>
            Loads prerequisites info from XML string.
            Returns TRUE if loading succeeded.
            </summary>
            <param name="xml">XML document as a string</param>
        </member>
        <member name="M:InstallationHelper.PrerequisitesHelper.GetItem(System.String,System.String,System.String,System.Nullable{WinAppFoundation.ArchitectureEnum})">
            <summary>
            Returns item matching the given conditions.
            </summary>
            <param name="codeName">Prerequisite code name</param>
            <param name="version">Prerequisite version</param>
            <param name="culture">Culture code. Default value, represented by null, is RequestedCulture code. If not found, DefaulCulture is used.</param>
            <param name="architecture">Architecture .Default value, represented by null, is RequestedArcitecture. If not found, DefaultArchitecture is used.</param>
        </member>
        <member name="M:InstallationHelper.PrerequisitesHelper.LoadXMLFromFile(System.String)">
            <summary>
            Load XML from file.
            </summary>
            <param name="filePath">Path to XML file</param>
        </member>
        <member name="M:InstallationHelper.PrerequisitesHelper.LoadXMLFromString(System.String)">
            <summary>
            Loads XML from XML string.
            </summary>
            <param name="xmlString">XML string</param>
        </member>
        <member name="M:InstallationHelper.PrerequisitesHelper.LoadAndValidateXML(System.IO.Stream)">
             <summary>
             Validates XML file or XML string against XML schema.
             </summary>
            <param name="inputStream">XML stream (file/memory)</param>
        </member>
        <member name="M:InstallationHelper.PrerequisitesHelper.GetAttrValue(System.Xml.XmlNode,System.String)">
            <summary>
            Returns attribute value.
            </summary>
            <param name="node">Node</param>
            <param name="attrName">Attribute</param>
        </member>
        <member name="M:InstallationHelper.PrerequisitesHelper.ValidateCulture(System.String)">
            <summary>
            Validates culture.
            </summary>
            <param name="culture">Culture code to validate</param>
        </member>
        <member name="P:InstallationHelper.PrerequisitesHelper.DefaultCulture">
            <summary>
            Gets or sets default culture, which is considered in search if package with requested culture was not found.
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisitesHelper.RequestedCulture">
            <summary>
            Gets or sets Requested culture. 
            This represents permanently requested culture, which can be overridden by calling method GetItem with optional culture attribute.  
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisitesHelper.DefaultArchitecture">
            <summary>
            Gets or sets default architecture, which is considered in search if package with requested architecture was not found.
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisitesHelper.RequestedArchitecture">
            <summary>
            Gets or sets Requested architecture. 
            This represents permanently requested architecture, which can be overridden by calling method GetItem with optional architecture attribute.  
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisitesHelper.ErrorMessage">
            <summary>
            Error message of the last load operation (LoadFile/LoadString).
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisitesHelper.Packages">
            <summary>
            XML document with prerequisites.
            </summary>
        </member>
        <member name="T:InstallationHelper.PrerequisiteInstaller">
            <summary>
            Provides functionality to install prerequisite packages.
            </summary>
        </member>
        <member name="M:InstallationHelper.PrerequisiteInstaller.#ctor(InstallationHelper.InstallationProfile,WinAppFoundation.IMessageLog,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="profile">Installation profile</param>
            <param name="log">Provides message logging</param>
            <param name="downloadDirectory">Absolute path to directory, where packages are downloaded</param>
            <param name="packagesFilePath">Absolute path to packages xml definition file</param>
        </member>
        <member name="M:InstallationHelper.PrerequisiteInstaller.Install">
            <summary>
            Starts prerequisites installation. Runs in background. Finishing(failing) is handled by events of this class.
            </summary>
        </member>
        <member name="M:InstallationHelper.PrerequisiteInstaller.Cancel">
            <summary>
            Cancels prerequisite installation.
            </summary>
        </member>
        <member name="M:InstallationHelper.PrerequisiteInstaller.Abort">
            <summary>
            Aborts all running operations.
            </summary>
        </member>
        <member name="M:InstallationHelper.PrerequisiteInstaller.WaitToFinish">
            <summary>
            Waits until downloading and installation is complete.
            </summary>
        </member>
        <member name="M:InstallationHelper.PrerequisiteInstaller.Worker_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Do dork method for main worker. Fills download list for Download helper, installation is then bounded to OnItemDownloaded event from DownloadHelper class.
            </summary>
            <param name="sender">Worker</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:InstallationHelper.PrerequisiteInstaller.DownloadHelper_OnItemDownloaded(WinAppFoundation.DownloadItem)">
            <summary>
            Event invoked after package is downloaded. Installs the package to the system.
            </summary>
            <param name="item">Currently downloaded item</param>
        </member>
        <member name="M:InstallationHelper.PrerequisiteInstaller.Worker_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            Closes installation process when all installation sub-processes have been completed.
            </summary>
        </member>
        <member name="M:InstallationHelper.PrerequisiteInstaller.AllItemsProcessed">
            <summary>
            Determines whether all prerequisites has been processed.
            </summary>
        </member>
        <member name="M:InstallationHelper.PrerequisiteInstaller.InvokeInstallation(System.Boolean)">
            <summary>
            Tries to install packages.
            </summary>
        </member>
        <member name="M:InstallationHelper.PrerequisiteInstaller.LogEvent(System.String,WinAppFoundation.EventTypeEnum)">
            <summary>
            Logs message to log.
            </summary>
            <param name="message">Message to log</param>
            <param name="eventType">Type of the event</param>
        </member>
        <member name="E:InstallationHelper.PrerequisiteInstaller.OnInstallationSuccess">
            <summary>
            Invoked on Installation Success.
            </summary>
        </member>
        <member name="E:InstallationHelper.PrerequisiteInstaller.OnInstallationFailure">
            <summary>
            Invoked on Installation Failure. 
            </summary>
        </member>
        <member name="E:InstallationHelper.PrerequisiteInstaller.OnMsiInstallationError">
            <summary>
            Invoked, when an error occurs during MSI package installation.
            </summary>
        </member>
        <member name="E:InstallationHelper.PrerequisiteInstaller.OnMsiInstallationException">
            <summary>
            Invoked, when an unhandled exception is received during MSI package installation.
            </summary>
        </member>
        <member name="E:InstallationHelper.PrerequisiteInstaller.OnProgressChanged">
            <summary>
            Invoked, when progress of whole (Downloading + Installation) process has been changed.
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisiteInstaller.BreakOnError">
            <summary>
            Determines whether to stop all actions when error occurs.
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisiteInstaller.IsBusy">
            <summary>
            Gets or sets whether the installer is busy.
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisiteInstaller.InstallationInProgress">
            <summary>
            Gets or sets whether the installation is in progress.
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisiteInstaller.PackagesDownloadDirectory">
            <summary>
            Gets or sets path to directory, where packages are downloaded, default value is stored in installation profile.
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisiteInstaller.PackagesDefinitionPath">
            <summary>
            Gets or sets path to xml file, where packages are defined, default value is stored in installation profile.
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisiteInstaller.InstallationProfile">
            <summary>
            Gets or sets Installation profile, main source for prerequisites installation.
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisiteInstaller.ExeInstaller">
            <summary>
            Provides installation of MSIs wrapped in EXE installers.
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisiteInstaller.Prerequisites">
            <summary>
            Gets prerequisites list.
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisiteInstaller.InstalledItems">
            <summary>
            Gets items that were installed successfully.
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisiteInstaller.NotInstalledItems">
            <summary>
            Gets items that weren't installed.
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisiteInstaller.Log">
            <summary>
            Provides message logging.
            </summary>
        </member>
        <member name="P:InstallationHelper.PrerequisiteInstaller.RestartRequired">
            <summary>
            Determines whether computer restart is required after installation.
            </summary>
        </member>
        <member name="T:InstallationHelper.PrerequisiteInstaller.InstallationFailure">
            <summary>
            Installation failure delegate.
            </summary>
            <param name="ex">Exception responsible for failure</param>
        </member>
        <member name="T:InstallationHelper.PrerequisiteInstaller.InstallationSuccess">
            <summary>
            Installation success delegate.
            </summary>
        </member>
        <member name="T:InstallationHelper.ResHelper">
            <summary>
            Class providing resource translations.
            </summary>
        </member>
        <member name="M:InstallationHelper.ResHelper.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:InstallationHelper.ResHelper.GetString(System.String,System.Object[])">
            <summary>
            Gets localized string from resource file.
            </summary>
            <param name="stringName">Codename of string</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <returns>Localized text</returns>
        </member>
        <member name="P:InstallationHelper.ResHelper.CurrentResHelper">
            <summary>
            Current resource helper object.
            </summary>
        </member>
        <member name="T:InstallationHelper.InstallationConfiguration">
            <summary>
            Class containing constants determining what is being installed.
            </summary>
        </member>
        <member name="F:InstallationHelper.InstallationConfiguration.PRODUCT_NAME">
            <summary>
            Name of product.
            </summary>
        </member>
        <member name="F:InstallationHelper.InstallationConfiguration.APP_POOL_NAME_PREFIX">
            <summary>
            Prefix for application pools
            </summary>
        </member>
        <member name="F:InstallationHelper.InstallationConfiguration.REGISTRY_KEY_PREFIX">
            <summary>
            Prefix of registry product registry keys.
            </summary>
        </member>
        <member name="F:InstallationHelper.InstallationConfiguration.REFERENCE_DLL">
            <summary>
            Reference DLL for loading version information.
            </summary>
        </member>
        <member name="F:InstallationHelper.InstallationConfiguration.WEB_APPLICATION_SLN">
            <summary>
            Solution file name for web application project type.
            </summary>
        </member>
        <member name="F:InstallationHelper.InstallationConfiguration.WEB_SITE_SLN">
            <summary>
            Solution file name for web site project type.
            </summary>
        </member>
        <member name="F:InstallationHelper.InstallationConfiguration.AZURE_SLN">
            <summary>
            Solution file name for azure project type.
            </summary>
        </member>
        <member name="F:InstallationHelper.InstallationConfiguration.REQUIRED_SQL_SERVER_ENGINE_VERSION">
            <summary>
            Lowest supported Microsoft SQL Server version.
            </summary>
        </member>
        <member name="F:InstallationHelper.InstallationConfiguration.REQUIRED_PROGRAM_FILES_DISK_SPACE">
            <summary>
            Disk space (in MB) required to perform the installation of program files.
            </summary>
        </member>
        <member name="F:InstallationHelper.InstallationConfiguration.REQUIRED_WEB_PROJECT_DISK_SPACE">
            <summary>
            Disk space (in MB) required to perform the installation of web project.
            </summary>
        </member>
        <member name="F:InstallationHelper.InstallationConfiguration.HELP_TOPIC_INSTALLER">
            <summary>
            Installation process documentation topic.
            </summary>
        </member>
        <member name="F:InstallationHelper.InstallationConfiguration.INSTALLER_HOSTED_DEMO_URL">
            <summary>
            URL to hosted demo offer.
            </summary>
        </member>
        <member name="F:InstallationHelper.InstallationConfiguration.INSTALLER_TUTORIAL_URL">
            <summary>
            URL to tutorial websites.
            </summary>
        </member>
        <member name="F:InstallationHelper.InstallationConfiguration.PRIVACY_STATEMENT_URL">
            <summary>
            URL to privacy statement pro module usage tracking data collection.
            </summary>
        </member>
        <member name="F:InstallationHelper.InstallationConfiguration.REQUIRED_IIS_VERSION">
            <summary>
            Lowest supported IIS version.
            </summary>
        </member>
        <member name="F:InstallationHelper.InstallationConfiguration.REQUIRED_LOCALDB_VERSION">
            <summary>
            Lowest supported LocalDB version.
            </summary>
        </member>
        <member name="P:InstallationHelper.InstallationConfiguration.CurrentVersion">
            <summary>
            Current version of the product.
            </summary>
        </member>
        <member name="P:InstallationHelper.InstallationConfiguration.ProductStartMenuName">
            <summary>
            Name of product containing system version
            </summary>
        </member>
        <member name="P:InstallationHelper.InstallationConfiguration.ProductProgramFilesName">
            <summary>
            Name of product program files directory.
            </summary>
        </member>
        <member name="P:InstallationHelper.InstallationConfiguration.VersionedProductName">
            <summary>
            Name of product with main version
            </summary>
        </member>
        <member name="P:InstallationHelper.InstallationConfiguration.InstallationPathRegistryKey">
            <summary>
            Path to registry key for current version installation path.
            </summary>
        </member>
        <member name="P:InstallationHelper.InstallationConfiguration.LicenseRegistryKey">
            <summary>
            Path to registry key for current version license.
            </summary>
        </member>
        <member name="P:InstallationHelper.InstallationConfiguration.InstallerUninstallSurveyUrl">
            <summary>
            URL to survey when user uninstalls program files.
            </summary>
        </member>
        <member name="P:InstallationHelper.InstallationConfiguration.InstallerTutorialRedirect">
            <summary>
            URL to analytic report of a successful installation.
            </summary>
        </member>
        <member name="T:InstallationHelper.DictionaryListInfo">
            <summary>
            Class containing list of spell checker dictionaries to be installed.
            </summary>
        </member>
        <member name="T:InstallationHelper.AbstractSetupModuleListInfo">
            <summary>
            Base class used for serialization of lists of modules.
            </summary>
        </member>
        <member name="T:InstallationHelper.AbstractSetupListInfo">
            <summary>
            Base class used for serialization of lists of components.
            </summary>
        </member>
        <member name="T:InstallationHelper.AbstractSetupInfo">
            <summary>
            Base class used for serialization of installation settings.
            </summary>
        </member>
        <member name="F:InstallationHelper.AbstractSetupInfo.EmailRegExp">
            <summary>
            E-mail regular expression.
            </summary>
        </member>
        <member name="M:InstallationHelper.AbstractSetupInfo.#ctor(System.String,System.String,InstallationHelper.InstallationProfile)">
            <summary>
            Default constructor.
            </summary>
            <param name="groupName">Name of main XML element</param>
            <param name="itemName">Name of items under main element</param>
            <param name="profile">Configuration object for installer.</param>
        </member>
        <member name="M:InstallationHelper.AbstractSetupInfo.ValidateAttributesInternal(System.String)">
            <summary>
            Checks if attributes has valid values.
            </summary>
            <param name="attributeName">Attribute name (optional).</param>
            <returns>Collection of attributes that failed the validation</returns>
        </member>
        <member name="M:InstallationHelper.AbstractSetupInfo.ValidateAttributesMessage">
            <summary>
            Returns user friendly validation message.
            </summary>
        </member>
        <member name="M:InstallationHelper.AbstractSetupInfo.IsEmail(System.String)">
            <summary>
            Returns true if the object representation matches the e-mail.
            </summary>
            <param name="value">Value to check</param>
        </member>
        <member name="M:InstallationHelper.AbstractSetupInfo.IsEmailList(System.String)">
            <summary>
            Returns true if string contains well formed e-mail addresses separated by semicolon.
            </summary>
            <param name="value">List of e-mail addresses</param>
        </member>
        <member name="M:InstallationHelper.AbstractSetupInfo.SaveAttributes(System.Xml.XmlDocument,System.Xml.XmlNode)">
            <summary>
            Saves attributes from dictionary to the given node.
            </summary>
            <param name="doc">XML document</param>
            <param name="node">Node</param>
        </member>
        <member name="M:InstallationHelper.AbstractSetupInfo.SaveToXML(System.Xml.XmlDocument,System.Xml.XmlNode)">
            <summary>
            Saves settings to XML.
            </summary>
            <param name="doc">XML document</param>
            <param name="parent">Node</param>
        </member>
        <member name="P:InstallationHelper.AbstractSetupInfo.Profile">
            <summary>
            Used for storing installation settings.
            </summary>
        </member>
        <member name="P:InstallationHelper.AbstractSetupInfo.SetupGroupName">
            <summary>
            Name of the parent node in XML file (e.g. "IIS", "Modules", "Websites", "Licenses").
            </summary>
        </member>
        <member name="P:InstallationHelper.AbstractSetupInfo.SetupItemName">
            <summary>
            Name of child nodes in XML file (e.g. "Module", "Website", "License").
            </summary>
        </member>
        <member name="M:InstallationHelper.AbstractSetupListInfo.#ctor(System.String,System.String,InstallationHelper.InstallationProfile)">
            <summary>
            Default constructor.
            </summary>
            <param name="groupName">Name of main XML element</param>
            <param name="itemName">Name of items under main element</param>
            <param name="profile">Configuration object for installer.</param>
        </member>
        <member name="M:InstallationHelper.AbstractSetupListInfo.ValidateList">
            <summary>
            Checks if user defined items are available in installation.
            </summary>
        </member>
        <member name="M:InstallationHelper.AbstractSetupListInfo.SaveToXML(System.Xml.XmlDocument,System.Xml.XmlNode)">
            <summary>
            Saves settings to XML.
            </summary>
            <param name="doc">XML document</param>
            <param name="parent">Node</param>
        </member>
        <member name="M:InstallationHelper.AbstractSetupListInfo.ValidateAttributesInternal(System.String)">
            <summary>
            Checks if attributes has valid values.
            </summary>
            <param name="attributeName">Attribute name (optional).</param>
            <returns>Collection of attributes that failed the validation</returns>
        </member>
        <member name="M:InstallationHelper.AbstractSetupListInfo.LoadList(System.Xml.XmlNode)">
            <summary>
            Loads/initializes list from XML.
            </summary>
            <param name="node">Node</param>
        </member>
        <member name="M:InstallationHelper.AbstractSetupListInfo.SaveList(System.Xml.XmlDocument,System.Xml.XmlNode)">
            <summary>
            Saves list to XML.
            </summary>
            <param name="doc">Document</param>
            <param name="parent">Parent node of the list</param>
        </member>
        <member name="P:InstallationHelper.AbstractSetupListInfo.InstallableModules">
            <summary>
            Gets list of installable components of current type.
            </summary>
        </member>
        <member name="P:InstallationHelper.AbstractSetupListInfo.List">
            <summary>
            List of all items.
            </summary>
        </member>
        <member name="M:InstallationHelper.AbstractSetupModuleListInfo.#ctor(System.String,System.String,InstallationHelper.InstallationProfile)">
            <summary>
            Default constructor.
            </summary>
            <param name="groupName">Name of main XML element</param>
            <param name="itemName">Name of items under main element</param>
            <param name="profile">Configuration object for installer.</param>
        </member>
        <member name="M:InstallationHelper.AbstractSetupModuleListInfo.LoadAttributes(System.Xml.XmlNode)">
            <summary>
            Loads attributes from given node.
            </summary>
            <param name="node">XML node to load attributes from.</param>
        </member>
        <member name="M:InstallationHelper.AbstractSetupModuleListInfo.LoadList(System.Xml.XmlNode)">
            <summary>
            Loads/initializes list from XML.
            </summary>
            <param name="node">Node</param>
        </member>
        <member name="M:InstallationHelper.AbstractSetupModuleListInfo.SaveToXML(System.Xml.XmlDocument,System.Xml.XmlNode)">
            <summary>
            Saves settings to XML.
            </summary>
            <param name="doc">XML document</param>
            <param name="parent">Node</param>
        </member>
        <member name="M:InstallationHelper.AbstractSetupModuleListInfo.SaveList(System.Xml.XmlDocument,System.Xml.XmlNode)">
            <summary>
            Saves list to XML.
            </summary>
            <param name="doc">Document</param>
            <param name="parent">Parent node of the list</param>
        </member>
        <member name="M:InstallationHelper.AbstractSetupModuleListInfo.CreateList">
            <summary>
            Creates list of modules to install depending on install action and install operation.
            </summary>
        </member>
        <member name="M:InstallationHelper.AbstractSetupModuleListInfo.Add(System.String)">
            <summary>
            Adds setup item with the given to the list.
            </summary>
            <param name="codeName"></param>
        </member>
        <member name="M:InstallationHelper.AbstractSetupModuleListInfo.Remove(System.String)">
            <summary>
            Removes setup item with the given code name from the list
            </summary>
            <param name="codeName"></param>
        </member>
        <member name="M:InstallationHelper.AbstractSetupModuleListInfo.Contains(System.String)">
            <summary>
            Indicates whether any of the setup items comply with the given predicate.
            </summary>
            <param name="codeName">Code name of a component</param>
        </member>
        <member name="M:InstallationHelper.AbstractSetupModuleListInfo.CreateList``1">
            <summary>
            Creates list of modules to install depending on install action and install operation.
            </summary>
        </member>
        <member name="M:InstallationHelper.AbstractSetupModuleListInfo.AddToList(System.String,InstallationHelper.InstallOperationEnum)">
            <summary>
            Adds a module with given operation to the list or updates operation of the existing item.
            </summary>
            <param name="codeName">Module code name</param>
            <param name="operation">Install operation</param>
        </member>
        <member name="P:InstallationHelper.AbstractSetupModuleListInfo.Action">
            <summary>
            How to process list of components.
            </summary>
        </member>
        <member name="M:InstallationHelper.DictionaryListInfo.#ctor(InstallationHelper.InstallationProfile)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:InstallationHelper.DictionaryListInfo.CreateList">
            <summary>
            Creates list of modules to install depending on install action and install operation.
            </summary>
        </member>
        <member name="P:InstallationHelper.DictionaryListInfo.InstallableModules">
            <summary>
            Gets list of installable components of current type.
            </summary>
        </member>
        <member name="T:InstallationHelper.IISInfo">
            <summary>
            Contains settings related to IIS configuration.
            </summary>
        </member>
        <member name="M:InstallationHelper.IISInfo.#ctor(InstallationHelper.InstallationProfile)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:InstallationHelper.IISInfo.LoadAttributes(System.Xml.XmlNode)">
            <summary>
            Loads attributes from given node.
            </summary>
            <param name="node">XML node to load attributes from.</param>
        </member>
        <member name="M:InstallationHelper.IISInfo.GenerateDefaultPathToInstance(System.String)">
            <summary>
            Returns default path for instance (path consists of physical path to site and product name with version number).
            </summary>
            <param name="iisPath">Physical path to site (if NULL, default path to IIS is used).</param>
        </member>
        <member name="M:InstallationHelper.IISInfo.ValidateAttributesMessage">
            <summary>
            Returns user friendly validation message.
            </summary>
        </member>
        <member name="M:InstallationHelper.IISInfo.GeneratePathToInstance(System.String,System.String)">
            <summary>
            Returns nonexistent path to instance.
            </summary>
            <param name="iisPath">Path to IIS according to current IIS settings (e.g. "c:\inetpub\wwwroot")</param>
            <param name="folderName">Subfolder name (e.q. "MySubfolder")</param>
        </member>
        <member name="P:InstallationHelper.IISInfo.Website">
            <summary>
            Selected site name.
            </summary>
        </member>
        <member name="P:InstallationHelper.IISInfo.TargetFolder">
            <summary>
            Target installation directory. 
            </summary>
        </member>
        <member name="P:InstallationHelper.IISInfo.DeleteExisting">
            <summary>
            Gets or sets whether to delete existing virtual directory in IIS.
            </summary>
        </member>
        <member name="P:InstallationHelper.IISInfo.KillRunningProcesses">
            <summary>
            Whether to kill running processes before deleting existing folder.
            </summary>
        </member>
        <member name="P:InstallationHelper.IISInfo.BaseFolderNameToDefaultInstance">
            <summary>
            Gets the default folder name to default instance with dependence on current major and minor version
            </summary>
        </member>
        <member name="P:InstallationHelper.IISInfo.WebSiteName">
            <summary>
            Gets or sets web site name. Returns default web site name if none is stored.
            </summary>
        </member>
        <member name="P:InstallationHelper.IISInfo.TargetInstallationDirectory">
            <summary>        
            Target installation directory.
            </summary>
        </member>
        <member name="P:InstallationHelper.IISInfo.WebProjectDirectory">
            <summary>
            Path to web project directory (i.e. directory containing all web project files).
            </summary>
        </member>
        <member name="P:InstallationHelper.IISInfo.UseIISExpress">
            <summary>
            Indicates whether to create application under IIS Express (instead of IIS).
            </summary>
        </member>
        <member name="T:InstallationHelper.LicenseListInfo">
            <summary>
            Contains settings related to licenses.
            </summary>
        </member>
        <member name="M:InstallationHelper.LicenseListInfo.#ctor(InstallationHelper.InstallationProfile)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:InstallationHelper.LicenseListInfo.LoadList(System.Xml.XmlNode)">
            <summary>
            Loads/initializes list from XML.
            </summary>
            <param name="node">Node</param>
        </member>
        <member name="M:InstallationHelper.LicenseListInfo.ValidateList">
            <summary>
            Checks if user defined items are available in installation.
            </summary>
        </member>
        <member name="M:InstallationHelper.LicenseListInfo.LoadAttributes(System.Xml.XmlNode)">
            <summary>
            Loads attributes from given node.
            </summary>
            <param name="node">XML node to load attributes from.</param>
        </member>
        <member name="P:InstallationHelper.LicenseListInfo.Licences">
            <summary>
            Returns list of licenses as array of strings (each string contains
            licensedomain, license separated by tabulator)
            </summary>
        </member>
        <member name="P:InstallationHelper.LicenseListInfo.InstallableModules">
            <summary>
            Gets list of installable components of current type.
            </summary>
        </member>
        <member name="T:InstallationHelper.ModuleListInfo">
            <summary>
            Class containing list of modules to be installed.
            </summary>
        </member>
        <member name="M:InstallationHelper.ModuleListInfo.#ctor(InstallationHelper.InstallationProfile)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:InstallationHelper.ModuleListInfo.CreateList">
            <summary>
            Creates list of modules to install depending on install action and install operation.
            </summary>
        </member>
        <member name="P:InstallationHelper.ModuleListInfo.InstallableModules">
            <summary>
            Gets list of installable components of current type.
            </summary>
        </member>
        <member name="T:InstallationHelper.NotificationInfo">
            <summary>
            Contains settings related to notifications sent during installation.
            </summary>
        </member>
        <member name="M:InstallationHelper.NotificationInfo.#ctor(InstallationHelper.InstallationProfile)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:InstallationHelper.NotificationInfo.LoadAttributes(System.Xml.XmlNode)">
            <summary>
            Loads attributes from given node.
            </summary>
            <param name="node">XML node to load attributes from.</param>
        </member>
        <member name="M:InstallationHelper.NotificationInfo.ValidateAttributesInternal(System.String)">
            <summary>
            Checks if attributes has valid values.
            </summary>
            <param name="attributeName">Not used</param>
        </member>
        <member name="P:InstallationHelper.NotificationInfo.Server">
            <summary>
            SMTP server.
            </summary>
        </member>
        <member name="P:InstallationHelper.NotificationInfo.UserName">
            <summary>
            Server login name.
            </summary>
        </member>
        <member name="P:InstallationHelper.NotificationInfo.Password">
            <summary>
            Password.
            </summary>
        </member>
        <member name="P:InstallationHelper.NotificationInfo.From">
            <summary>
            E-mail sender.
            </summary>
        </member>
        <member name="P:InstallationHelper.NotificationInfo.To">
            <summary>
            E-mail recipients.
            </summary>
        </member>
        <member name="P:InstallationHelper.NotificationInfo.Subject">
            <summary>
            E-mail subject.
            </summary>
        </member>
        <member name="P:InstallationHelper.NotificationInfo.SSL">
            <summary>
            Indicates whether SSL will be used.
            </summary>
        </member>
        <member name="P:InstallationHelper.NotificationInfo.AttachLogFile">
            <summary>
            Indicates whether log file will be included to e-mail message.
            </summary>
        </member>
        <member name="P:InstallationHelper.NotificationInfo.Enabled">
            <summary>
            Enables/disables sending notifications.
            </summary>
        </member>
        <member name="T:InstallationHelper.SetupInfo">
            <summary>
            Contains general installation settings.
            </summary>
        </member>
        <member name="M:InstallationHelper.SetupInfo.#ctor(InstallationHelper.InstallationProfile,InstallationHelper.IInstallationPathProvider)">
            <summary>
            Default constructor.
            </summary>
            <param name="profile">Configuration class for installer</param>
            <param name="installationPathProvider">Program files installation path provider</param>
            <exception cref="T:System.ArgumentNullException">Installation path provider not provided</exception>
        </member>
        <member name="M:InstallationHelper.SetupInfo.LoadAttributes(System.Xml.XmlNode)">
            <summary>
            Loads attributes from given node.
            </summary>
            <param name="node">XML node to load attributes from.</param>
        </member>
        <member name="M:InstallationHelper.SetupInfo.ValidateAttributesMessage">
            <summary>
            Returns user friendly validation message.
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupInfo.Location">
            <summary>
            Target installation location (type of the installation).
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupInfo.NET">
            <summary>
            Gets or sets version of .NET framework used for installation of single web site instance.
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupInfo.Version">
            <summary>
            Target version.
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupInfo.SetupFolder">
            <summary>
            Gets or sets target installation folder.
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupInfo.InstallOnlyProgramFiles">
            <summary>
            Gets or sets whether to install only program files.
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupInfo.ProgramFilesPath">
            <summary>
            Gets program files path.
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupInfo.LocalDataDirectory">
            <summary>
            Gets directory with all data files (Dictionaries, Modules, Resources, SQL, Templates, Web...).
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupInfo.OpenAfterInstall">
            <summary>
            Gets or sets whether to open newly installed site and tutorial page in browser.
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupInfo.DeleteExisting">
            <summary>
            Whether to remove previous installation from Program files.
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupInfo.DoNotOverwriteInstallation">
            <summary>
            Gets or sets whether to overwrite existing modules when modifying installation.
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupInfo.IncludeHealthMonitoring">
            <summary>
            Whether to install health monitoring performance counters.
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupInfo.IncludeWinServices">
            <summary>
            Whether to install windows services.
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupInfo.RegisterApplicationToEventLog">
            <summary>
            Whether to register application to Windows event log.
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupInfo.KillRunningProcesses">
            <summary>
            Whether to kill running processes before deleting existing folder.
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupInfo.ProjectType">
            <summary>
            Gets or sets type of web project (site/application/azure etc.)
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupInfo.EnableModuleUsageTracking">
            <summary>
            Gets or sets whether to enable module usage tracking on the installed instance.
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupInfo.NETVersion">
            <summary>
            Gets or sets version of .NET framework used for installation of single web site instance.
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupInfo.ModifyCurrentInstallation">
            <summary>
            Determines if installer is about to change current installation.
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupInfo.TargetSolutionFile">
            <summary>
            Target solution file.
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupInfo.CurrentInstallationPath">
            <summary>
            Returns path to current installation of Program files (if NULL, CMS has not been installed yet).
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupInfo.ProgramFilesInstalled">
            <summary>
            Determines whether program files has already been installed.
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupInfo.InstallationTempPath">
            <summary>
            Path to temporary installation folder.
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupInfo.TargetWebConfigFile">
            <summary>
            Target web configuration file.
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupInfo.TargetWebConfigPath">
            <summary>
            Target web configuration path.
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupInfo.URLToSite">
            <summary>
            Gets or sets URL to installed site.
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupInfo.URLToAdmin">
            <summary>
            Gets or sets URL to admin interface.
            </summary>
        </member>
        <member name="P:InstallationHelper.SetupInfo.OverwriteInstallation">
            <summary>
            Gets or sets whether to overwrite existing modules when modifying installation.
            </summary>
        </member>
        <member name="T:InstallationHelper.SilentInfo">
            <summary>
            Contains settings related to silent installation.
            </summary>
        </member>
        <member name="F:InstallationHelper.SilentInfo.DEFAULT_LOGFILE_EXTENSION">
            <summary>
            Default extension of setup log file.
            </summary>
        </member>
        <member name="M:InstallationHelper.SilentInfo.#ctor(InstallationHelper.InstallationProfile)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:InstallationHelper.SilentInfo.LoadAttributes(System.Xml.XmlNode)">
            <summary>
            Loads attributes from given node.
            </summary>
            <param name="node">XML node to load attributes from.</param>
        </member>
        <member name="P:InstallationHelper.SilentInfo.Log">
            <summary>
            Gets or sets whether to log messages to log file.
            </summary>
        </member>
        <member name="P:InstallationHelper.SilentInfo.LogFile">
            <summary>
            Gets or sets path to log file.
            </summary>
        </member>
        <member name="P:InstallationHelper.SilentInfo.OnError">
            <summary>
            Gets or sets what to do if error occurs.
            </summary>
        </member>
        <member name="P:InstallationHelper.SilentInfo.CheckRequirements">
            <summary>
            Gets or sets whether to check installation requirements (e.g. that .NET of specific version is installed).
            </summary>
        </member>
        <member name="P:InstallationHelper.SilentInfo.ShowProgress">
            <summary>
            Whether to log progress and messages to command line.
            </summary>
        </member>
        <member name="P:InstallationHelper.SilentInfo.ConsoleLoggingEnabled">
            <summary>
            Determines whether to log to console.
            </summary>
        </member>
        <member name="T:InstallationHelper.SQLInfo">
            <summary>
            Contains settings related to database installation.
            </summary>
        </member>
        <member name="M:InstallationHelper.SQLInfo.#ctor(InstallationHelper.InstallationProfile)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:InstallationHelper.SQLInfo.LoadAttributes(System.Xml.XmlNode)">
            <summary>
            Loads attributes from given node.
            </summary>
            <param name="node">XML node to load attributes from.</param>
        </member>
        <member name="M:InstallationHelper.SQLInfo.InitFromConnectionString(System.String)">
            <summary>
            Initializes info using the given connection string.
            </summary>
            <param name="connString">Connection string</param>
        </member>
        <member name="P:InstallationHelper.SQLInfo.InstallDatabase">
            <summary>
            Indicates whether database is to be installed.
            </summary>
        </member>
        <member name="P:InstallationHelper.SQLInfo.HasConnection">
            <summary>
            Indicates whether connection to SQL server is available.
            </summary>
        </member>
        <member name="P:InstallationHelper.SQLInfo.DatabaseInstallationRequired">
            <summary>
            Indicates whether database installation is required.
            </summary>
        </member>
        <member name="P:InstallationHelper.SQLInfo.Server">
            <summary>
            Server name.
            </summary>
        </member>
        <member name="P:InstallationHelper.SQLInfo.Authentication">
            <summary>
            Type of authentication.
            </summary>
        </member>
        <member name="P:InstallationHelper.SQLInfo.UserName">
            <summary>
            SQL login name.
            </summary>
        </member>
        <member name="P:InstallationHelper.SQLInfo.Password">
            <summary>
            SQL password.
            </summary>
        </member>
        <member name="P:InstallationHelper.SQLInfo.DatabaseName">
            <summary>
            Database name.
            </summary>
        </member>
        <member name="P:InstallationHelper.SQLInfo.Collation">
            <summary>
            Collation.
            </summary>
        </member>
        <member name="P:InstallationHelper.SQLInfo.Schema">
            <summary>
            SQL schema.
            </summary>
        </member>
        <member name="P:InstallationHelper.SQLInfo.Operation">
            <summary>
            Type of operation (new database/modify database).
            </summary>
        </member>
        <member name="P:InstallationHelper.SQLInfo.DeleteExisting">
            <summary>
            Indicates whether existing DB will be deleted.
            </summary>
        </member>
        <member name="T:InstallationHelper.UICultureListInfo">
            <summary>
            Class containing list of UI cultures to be installed.
            </summary>
        </member>
        <member name="M:InstallationHelper.UICultureListInfo.#ctor(InstallationHelper.InstallationProfile)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:InstallationHelper.UICultureListInfo.CreateList">
            <summary>
            Creates list of modules to install depending on install action and install operation.
            </summary>
        </member>
        <member name="P:InstallationHelper.UICultureListInfo.InstallableModules">
            <summary>
            Gets list of installable components of current type.
            </summary>
        </member>
        <member name="T:InstallationHelper.WebSiteListInfo">
            <summary>
            Contains settings related to web sites.
            </summary>
        </member>
        <member name="M:InstallationHelper.WebSiteListInfo.#ctor(InstallationHelper.InstallationProfile)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:InstallationHelper.WebSiteListInfo.LoadList(System.Xml.XmlNode)">
            <summary>
            Loads/initializes list from XML.
            </summary>
            <param name="node">Node</param>
        </member>
        <member name="M:InstallationHelper.WebSiteListInfo.LoadAttributes(System.Xml.XmlNode)">
            <summary>
            Loads attributes from given node.
            </summary>
            <param name="node">XML node to load attributes from.</param>
        </member>
        <member name="M:InstallationHelper.WebSiteListInfo.AddWebSite(InstallationHelper.WebSiteSetupItem)">
            <summary>
            Adds given website setup item to list of items to be installed.
            </summary>
            <param name="site">Website setup item</param>
        </member>
        <member name="M:InstallationHelper.WebSiteListInfo.RemoveWebSites(System.Predicate{InstallationHelper.WebSiteSetupItem})">
            <summary>
            Removes all website setup items from list of items to be installed.
            </summary>
            <param name="match">Predicate indicating what items to remove.</param>
        </member>
        <member name="P:InstallationHelper.WebSiteListInfo.Templates">
            <summary>
            Returns list of WebSiteSetup items.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebSiteListInfo.InstallableModules">
            <summary>
            Gets list of installable components of current type.
            </summary>
        </member>
        <member name="T:InstallationHelper.WebTemplateListInfo">
            <summary>
            Class containing list of web templates to be installed.
            </summary>
        </member>
        <member name="M:InstallationHelper.WebTemplateListInfo.#ctor(InstallationHelper.InstallationProfile)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:InstallationHelper.WebTemplateListInfo.CreateList">
            <summary>
            Creates list of modules to install depending on install action and install operation.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebTemplateListInfo.InstallableModules">
            <summary>
            Gets list of installable components of current type.
            </summary>
        </member>
        <member name="T:InstallationHelper.InstallationProfile">
            <summary>
            Configuration class for installer.
            </summary>
        </member>
        <member name="F:InstallationHelper.InstallationProfile.SILENT_XSD">
            <summary>
            Path to embedded silent install XML schema.
            </summary>
        </member>
        <member name="M:InstallationHelper.InstallationProfile.#ctor(InstallationHelper.IInstallationPathProvider)">
            <summary>
            Default constructor for installation profile.
            </summary>
            <param name="installationPathProvider">Program files installation path provider</param>
            <exception cref="T:System.ArgumentNullException">Installation path provider not provided</exception>
        </member>
        <member name="M:InstallationHelper.InstallationProfile.ValidateLists">
            <summary>
            Validates all list of components.
            </summary>
            <returns>Error message when error occurs, otherwise null.</returns>
        </member>
        <member name="M:InstallationHelper.InstallationProfile.GetInstallation">
            <summary>
            Creates collection of components to be installed (based on InstallationProfile).
            </summary>
        </member>
        <member name="M:InstallationHelper.InstallationProfile.Deserialize(System.String)">
            <summary>
            Loads configuration from file. Method returns error message.
            </summary>
            <param name="path">Path to XML file</param>
        </member>
        <member name="M:InstallationHelper.InstallationProfile.Serialize(System.String)">
            <summary>
            Stores configuration to file.
            </summary>
            <param name="path">Path</param>
        </member>
        <member name="M:InstallationHelper.InstallationProfile.Clear">
            <summary>
            Sets everything to the default values.
            </summary>
        </member>
        <member name="M:InstallationHelper.InstallationProfile.ValidateSettings">
            <summary>
            Check if loaded values are valid. Returns user-friendly message of errors.
            </summary>
        </member>
        <member name="M:InstallationHelper.InstallationProfile.SendNotificationEmails(System.Boolean,System.String)">
            <summary>
            Sends notification e-mail with attached log file and message as e-mail body.
            </summary>
            <param name="doNotCompressAttachment">Indicates whether attachments should be kept uncompressed.</param>
            <param name="message">E-mail body (optional).</param>
        </member>
        <member name="P:InstallationHelper.InstallationProfile.SetupInfos">
            <summary>
            Gets a list of setup infos.
            </summary>
        </member>
        <member name="P:InstallationHelper.InstallationProfile.SetupListInfos">
            <summary>
            Gets a list of setup list infos.
            </summary>
        </member>
        <member name="P:InstallationHelper.InstallationProfile.SetupModuleListInfos">
            <summary>
            Gets a list of setup module list infos.
            </summary>
        </member>
        <member name="P:InstallationHelper.InstallationProfile.CurrentExecutingAssembly">
            <summary>
            Gets current assembly.
            </summary>
        </member>
        <member name="P:InstallationHelper.InstallationProfile.ApplicationExecutablePath">
            <summary>
            Gets or sets path of application executable file.
            </summary>
        </member>
        <member name="P:InstallationHelper.InstallationProfile.ComponentProvider">
            <summary>
            Used for manipulation with installed components.
            </summary>
        </member>
        <member name="P:InstallationHelper.InstallationProfile.SetupInfo">
            <summary>
            Setup settings.
            </summary>
        </member>
        <member name="P:InstallationHelper.InstallationProfile.SQLInfo">
            <summary>
            Database settings.
            </summary>
        </member>
        <member name="P:InstallationHelper.InstallationProfile.IISInfo">
            <summary>
            IIS settings.
            </summary>
        </member>
        <member name="P:InstallationHelper.InstallationProfile.ModulesInfo">
            <summary>
            Modules settings.
            </summary>
        </member>
        <member name="P:InstallationHelper.InstallationProfile.WebTemplatesInfo">
            <summary>
            Web templates settings.
            </summary>
        </member>
        <member name="P:InstallationHelper.InstallationProfile.UICulturesInfo">
            <summary>
            UI culture settings.
            </summary>
        </member>
        <member name="P:InstallationHelper.InstallationProfile.DictionariesInfo">
            <summary>
            Dictionaries settings.
            </summary>
        </member>
        <member name="P:InstallationHelper.InstallationProfile.WebSitesInfo">
            <summary>
            Web site settings.
            </summary>
        </member>
        <member name="P:InstallationHelper.InstallationProfile.LicensesInfo">
            <summary>
            Licenses settings.
            </summary>
        </member>
        <member name="P:InstallationHelper.InstallationProfile.SilentInfo">
            <summary>
            Base silent info settings.
            </summary>
        </member>
        <member name="P:InstallationHelper.InstallationProfile.NotificationInfo">
            <summary>
            Notification settings.
            </summary>
        </member>
        <member name="T:InstallationHelper.ProgramFilesInstallationEventArgs">
            <summary>
            Event arguments passed to InstallToProgramFiles event handler.
            </summary>
        </member>
        <member name="M:InstallationHelper.ProgramFilesInstallationEventArgs.#ctor">
            <summary>
            Initializes instance with empty install directory.
            </summary>
        </member>
        <member name="M:InstallationHelper.ProgramFilesInstallationEventArgs.#ctor(System.String)">
            <summary>
            Initializes target directory for program files installation.
            </summary>
            <param name="installDirectory">Install directory path</param>
        </member>
        <member name="P:InstallationHelper.ProgramFilesInstallationEventArgs.Success">
            <summary>
            Indicates whether the installation was successful.
            </summary>
        </member>
        <member name="P:InstallationHelper.ProgramFilesInstallationEventArgs.InstallDirectory">
            <summary>
            Installation target directory path.
            </summary>
        </member>
        <member name="T:InstallationHelper.SilentInstallCmdLine">
            <summary>
            Command line installation.
            </summary>
        </member>
        <member name="M:InstallationHelper.SilentInstallCmdLine.Validate(System.String[])">
            <summary>
            Parses and validates silent installation.
            </summary>
            <param name="args">Parameters from command line</param>
            <returns>TRUE if succeeded</returns>
        </member>
        <member name="M:InstallationHelper.SilentInstallCmdLine.Parse(System.String[])">
            <summary>
            Parsing command line parameters. Returns false, if parsing failed.
            </summary>
            <param name="args">Parameters from command line</param>
        </member>
        <member name="M:InstallationHelper.SilentInstallCmdLine.PrintHelp">
            <summary>
            Prints help.
            </summary>
        </member>
        <member name="M:InstallationHelper.SilentInstallCmdLine.LoadXML(System.String)">
            <summary>
            Loads XML and initializes installer. Returns false when something fail.
            </summary>
            <param name="xmlSettings">Path to XML file</param>
        </member>
        <member name="P:InstallationHelper.SilentInstallCmdLine.Profile">
            <summary>
            Configuration object for installer.
            </summary>
        </member>
        <member name="P:InstallationHelper.SilentInstallCmdLine.MessageLog">
            <summary>
            Gets object for logging events.
            </summary>
        </member>
        <member name="T:InstallationHelper.SystemMacroResolver">
            <summary>
            Class providing macro resolving for the purpose of silent install.
            </summary>
        </member>
        <member name="M:InstallationHelper.SystemMacroResolver.ResolveMacros(System.String)">
            <summary>
            Resolves macros in given text.
            </summary>
            <param name="originalText">Text to resolve</param>
        </member>
        <member name="T:InstallationHelper.WebConfigManager">
            <summary>
            Class for manipulating with web.config file (add/set/update)
            </summary>
        </member>
        <member name="F:InstallationHelper.WebConfigManager.WEB_CONFIG_TRANSFORMATION_EXTENSION">
            <summary>
            File extension to a file containing web.config transformations to upgrade it from one version to another.
            </summary>
        </member>
        <member name="F:InstallationHelper.WebConfigManager.WEB_CONFIG_ORIGINAL_EXTENSION">
            <summary>
            File extension to a file containing web.config that is not integrated nor classic.
            </summary>
        </member>
        <member name="M:InstallationHelper.WebConfigManager.#ctor(System.String)">
            <summary>
            Constructor - loads specified file.
            </summary>
            <param name="configPath">Path to web.config.</param>
        </member>
        <member name="M:InstallationHelper.WebConfigManager.GetSettingsValue(System.String)">
            <summary>
            Returns app settings key value or null if not found.
            </summary>
            <param name="settingsName">Settings key name</param>
        </member>
        <member name="M:InstallationHelper.WebConfigManager.SetSettingsValue(System.String,System.String)">
            <summary>
            Sets settings key value.
            </summary>
            <param name="settingsName">Settings key name</param>
            <param name="settingsValue">Settings key value</param>
        </member>
        <member name="M:InstallationHelper.WebConfigManager.RemoveSettingsKey(System.String)">
            <summary>
            Removes settings key.
            </summary>
            <param name="settingsName">Settings key name</param>
        </member>
        <member name="M:InstallationHelper.WebConfigManager.GetConnectionString(System.String,System.String)">
            <summary>
            Gets connection string from web.config.
            </summary>
            <param name="pathToWebsite">Path to a web project</param>
            <param name="connectionStringName">Name of connection string to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:InstallationHelper.WebConfigManager.GetConnectionString(System.String)">
            <summary>
            Returns connection string from web.config or null if not found.
            </summary>
            <param name="connectionName">Connection name</param>
        </member>
        <member name="M:InstallationHelper.WebConfigManager.SetConnectionString(System.String,System.String)">
            <summary>
            Sets connection string.
            </summary>
            <param name="connectionName">Connection name</param>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="M:InstallationHelper.WebConfigManager.RemoveConnectionString(System.String)">
            <summary>
            Removes connection string.
            </summary>
            <param name="connectionName">Connection name</param>
        </member>
        <member name="M:InstallationHelper.WebConfigManager.RemoveAllConnectionStrings">
            <summary>
            Removes all connection strings.
            </summary>
        </member>
        <member name="M:InstallationHelper.WebConfigManager.AddPagesNamespace(System.String)">
            <summary>
            Adds pages namespace.
            </summary>
            <param name="nameSpace">Namespace</param>
        </member>
        <member name="M:InstallationHelper.WebConfigManager.RemovePagesNamespace(System.String)">
            <summary>
            Removes pages namespace.
            </summary>
            <param name="nameSpace">Namespace</param>
        </member>
        <member name="M:InstallationHelper.WebConfigManager.AddPagesNamespace(System.String,System.String,System.String)">
            <summary>
            Adds pages namespace.
            </summary>
            <param name="tagPrefix">The tag prefix being mapped to a source file or namespace and assembly.</param>
            <param name="nameSpace">The namespace associated with the tag prefix.</param>
            <param name="assembly">The assembly where the namespace resides.</param>
        </member>
        <member name="M:InstallationHelper.WebConfigManager.RemovePagesNamespace(System.String,System.String,System.String)">
            <summary>
            Remove pages namespace.
            </summary>
            <param name="tagPrefix">The tag prefix being mapped to a source file or namespace and assembly.</param>
            <param name="nameSpace">The namespace associated with the tag prefix.</param>
            <param name="assembly">The assembly where the namespace resides.</param>
        </member>
        <member name="M:InstallationHelper.WebConfigManager.AddCustomError(System.Int32,System.String)">
            <summary>
            Adds custom error page.
            </summary>
            <param name="statusCode">Status code that will result in redirection to the error page</param>
            <param name="redirect">URL</param>
        </member>
        <member name="M:InstallationHelper.WebConfigManager.RemoveCustomError(System.Int32)">
            <summary>
            Removes custom error page for the specified status code.
            </summary>
            <param name="statusCode">Status code</param>
        </member>
        <member name="M:InstallationHelper.WebConfigManager.AddHttpHandler(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds HTTP handler.
            </summary>
            <param name="verb">A comma-separated list of HTTP verbs.</param>
            <param name="path">URL</param>
            <param name="type">A comma-separated class/assembly combination.</param>
            <param name="validate">TRUE to allow validation.</param>
        </member>
        <member name="M:InstallationHelper.WebConfigManager.RemoveHttpHandler(System.String,System.String)">
            <summary>
            Removes HTTP handler.
            </summary>
            <param name="verb">A comma-separated list of HTTP verbs.</param>
            <param name="path">URL</param>
        </member>
        <member name="M:InstallationHelper.WebConfigManager.AddHttpModule(System.String,System.String)">
            <summary>
            Adds HTTP module.
            </summary>
            <param name="name">The module name.</param>
            <param name="type">A comma-separated list containing the module type name and the assembly information.</param>
        </member>
        <member name="M:InstallationHelper.WebConfigManager.RemoveHttpModule(System.String)">
            <summary>
            Removes HTTP module.
            </summary>
            <param name="name">The module name.</param>
        </member>
        <member name="M:InstallationHelper.WebConfigManager.AddAssembly(System.String)">
            <summary>
            Adds assembly.
            </summary>
            <param name="assemblyName">Full assembly name</param>
        </member>
        <member name="M:InstallationHelper.WebConfigManager.RemoveAssembly(System.String)">
            <summary>
            Removes assembly.
            </summary>
            <param name="assemblyName">Full assembly name</param>
        </member>
        <member name="M:InstallationHelper.WebConfigManager.SetHttpCookiesSection(System.Boolean)">
            <summary>
            Set HttpOnly flag.
            </summary>
            <param name="httpOnlyCookies">Flag value</param>
        </member>
        <member name="M:InstallationHelper.WebConfigManager.SetInProcSessionState">
            <summary>
            Sets InProc session state.
            </summary>
        </member>
        <member name="M:InstallationHelper.WebConfigManager.SetStateServerSessionState">
            <summary>
            Sets StateServer session state.
            </summary>
        </member>
        <member name="M:InstallationHelper.WebConfigManager.GetWebServerElement(System.String,System.Boolean)">
            <summary>
            Gets child of system.webServer element with given name.
            </summary>
            <param name="name">Name of the desired element.</param>
            <param name="create">Create element if not present.</param>
        </member>
        <member name="M:InstallationHelper.WebConfigManager.UpdateConfig(System.String)">
            <summary>
            Updates config based on transformation rules specified in <paramref name="transformationFilePath"/> file.
            </summary>
            <param name="transformationFilePath">Path to file with transformation.</param>
        </member>
        <member name="M:InstallationHelper.WebConfigManager.SortAndRemoveDuplicateElements(System.Xml.XmlDocument,System.Xml.XmlNamespaceManager,System.String)">
            <summary>
            Sorts clear/remove/add elements (in this order) of the node specified by <paramref name="path"/> and removes duplicate elements.
            </summary>
            <param name="xmlDocument">Document</param>
            <param name="namespaceManager">Namespace manager used for <paramref name="xmlDocument"/> document.</param>
            <param name="path">XPath to node with clear/remove/add elements (e.g. "/configuration/system.webServer/modules")</param>
        </member>
        <member name="M:InstallationHelper.WebConfigManager.GetNodeOrder(System.Xml.XmlNode)">
            <summary>
            Prioritizes clear and remove elements to the add ones.
            </summary>
            <param name="node">Node to be ordered</param>
        </member>
        <member name="M:InstallationHelper.WebConfigManager.LoadConfig(System.String)">
            <summary>
            Loads web.config file.
            </summary>
            <param name="configPath">Web.config file path</param>
        </member>
        <member name="M:InstallationHelper.WebConfigManager.SaveConfig">
            <summary>
            Saves web.config file.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebConfigManager.WebConfigPath">
            <summary>
            Path to web.config file.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebConfigManager.Configuration">
            <summary>
            Web.config configuration object.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebConfigManager.WebConfigXmlDocument">
            <summary>
            XML representation of web.config.
            </summary>
        </member>
        <member name="T:InstallationHelper.CSProjManager">
            <summary>
            Class for manipulation with .csproj files.
            </summary>
        </member>
        <member name="M:InstallationHelper.CSProjManager.#ctor(System.String,InstallationHelper.CSProjManager)">
            <summary>
            Basic constructor.
            </summary>
            <param name="projectFile">Relative or absolute path to project file.</param>
            <param name="boundary">Project manager, whose items are a super set of items in this manager (only items, that are in boundary manager, possibly can be in this manager)</param>
        </member>
        <member name="M:InstallationHelper.CSProjManager.Save">
            <summary>
            Save current project file.
            </summary>
        </member>
        <member name="M:InstallationHelper.CSProjManager.RemoveFromProject(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes items from .csproj .
            </summary>
            <param name="dirs">Directories to remove</param>
        </member>
        <member name="M:InstallationHelper.CSProjManager.IncludeInProject(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Add items to .csproj .
            </summary>
            <param name="dirs">Directories to be included[path to existing, path to be included]</param>
            <param name="pathToData">Path to source files</param>
            <param name="ignored">Paths to be included, which will be ignored during inclusion</param>
        </member>
        <member name="M:InstallationHelper.CSProjManager.MergeWith(InstallationHelper.CSProjItem,System.Boolean)">
            <summary>
            Create new item in .csproj or modify current item if <paramref name="item"/> exists in this project file.
            </summary>
            <param name="item">CSProj item to merge with</param>
            <param name="save">Indicates if current change should be saved</param>
        </member>
        <member name="M:InstallationHelper.CSProjManager.MergeWith(InstallationHelper.CSProjManager)">
            <summary>
            Merges given .csproj file with this .csproj file. Creates or modifies items in this file.
            </summary>
            <param name="manager">CSProj manager of .csproj which is to be merged with this .csproj file.</param>
        </member>
        <member name="M:InstallationHelper.CSProjManager.UpgradeTargetFramework(WinAppFoundation.NETVersionEnum,System.String)">
            <summary>
            Converts project file to given target framework version e.g. .NET 4.5 (VS 2008).
            </summary>
            <param name="version">Target framework version</param>
            <param name="toolsVersion">Project tools version (for additional info see: http://msdn.microsoft.com/en-us/library/bb383796.aspx )</param>
        </member>
        <member name="M:InstallationHelper.CSProjManager.UpgradeToVisualStudio2012">
            <summary>
            Updates project file to new Visual Studio.
            </summary>
        </member>
        <member name="M:InstallationHelper.CSProjManager.ShouldReferenceItemBeReplaced(InstallationHelper.CSProjItem,InstallationHelper.CSProjItem)">
            <summary>
            References in the original file should be replaced only if one of the following condition is met:
            - Reference is not present in the original csproj
            - Reference in the original or new csproj doesn't specify version (this will happen for the system assemblies)
            - Reference in the original csproj is older or the same version as in the new csproj file. 
            
            The last condition is needed, because we do not want to overwrite customer's reference if it's referencing a newer version than our csproj file.
            </summary>
            <param name="item">Reference item to be added</param>
            <param name="existing">Reference item from the original csproj with the same assembly name as <paramref name="item"/>. Can be null if original csproj does not reference the same assembly.</param>
            <returns>True if reference should be replaced; false otherwise</returns>
        </member>
        <member name="M:InstallationHelper.CSProjManager.ReplaceItem(InstallationHelper.CSProjItem,InstallationHelper.CSProjItem)">
            <summary>
            Replaces the item in the original csproj (<paramref name="existing"/> with the new item (<paramref name="item"/>).
            </summary>
            <param name="item">Item to be added</param>
            <param name="existing">Item from the original csproj which matches the item from the new csproj (<paramref name="item"/>). Can be null if original csproj does not contain the item that matches.</param>
        </member>
        <member name="M:InstallationHelper.CSProjManager.RemoveItems(System.String)">
            <summary>
            Removes items from ItemGroups : Compile, Content, Reference, None.
            </summary>
            <param name="prefix">Prefix of included item.</param>
        </member>
        <member name="M:InstallationHelper.CSProjManager.AddItem(System.String,System.String)">
            <summary>
            Includes one file in project.
            </summary>
            <param name="sourcePath">Full path to existing file (due to DLLs)</param>
            <param name="destinationPath">Full path to be added to .csproj (e.g. c:\inetpub\wwwroot\cms\dir\file.ext)</param>
        </member>
        <member name="M:InstallationHelper.CSProjManager.AddItemContent(System.String)">
            <summary>
            Includes content files to project file. These are mostly .aspx, .ascx and .resx files.
            </summary>
            <param name="path">Path to the content file (relative to CMS)</param>
        </member>
        <member name="M:InstallationHelper.CSProjManager.AddItemDesigner(System.String)">
            <summary>
            Includes .designer.cs files to project file.
            </summary>
            <param name="path">Path to .designer.cs (relative to CMS)</param>
        </member>
        <member name="M:InstallationHelper.CSProjManager.AddItemCodebehind(System.String)">
            <summary>
            Includes .cs files to project file.
            </summary>
            <param name="path">Path to .cs (relative to CMS)</param>
        </member>
        <member name="M:InstallationHelper.CSProjManager.AddItemDLL(System.String,System.String,System.String,System.String)">
            <summary>
            Includes DLL in project file.
            </summary>
            <param name="existingAssembly">Path to existing DLL file.</param>
            <param name="assemblyName">Name of assembly.</param>
            <param name="fullyQualifiedName">Fully qualified name of assembly.</param>
            <param name="destinationPath">Destination path (relative path to csproj). This value will be used in the HintPath element.</param>
        </member>
        <member name="M:InstallationHelper.CSProjManager.AddItemDLL(System.String,System.String)">
            <summary>
            Includes DLL in project file.
            </summary>
            <param name="sourcePath">Path to existing DLL file (not symlink)</param>
            <param name="destinationPath">Destination path (relative to csproj file).</param>
        </member>
        <member name="M:InstallationHelper.CSProjManager.GetPostBuildElement(System.String)">
            <summary>
            Returns post-build element value.
            </summary>
            <param name="elementName">Post-build element name (PostBuildEvent, RunPostBuildEvent).</param>
        </member>
        <member name="M:InstallationHelper.CSProjManager.SetPostBuildElement(System.String,System.String)">
            <summary>
            Sets post-build element value.
            </summary>
            <param name="elementName">Post-build element name (PostBuildEvent, RunPostBuildEvent).</param>
            <param name="value">Element value (if NULL, element will be deleted)</param>
        </member>
        <member name="M:InstallationHelper.CSProjManager.ResolveRelativePath(System.String)">
            <summary>
            Converts absolute path to a path relative to csproj directory.
            </summary>
            <param name="path">Absolute path</param>
        </member>
        <member name="M:InstallationHelper.CSProjManager.GetPathsToInclude(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Get complete collection of source-destination paths from given dictionary. All sub-files and sub-folders are explored.
            </summary>
            <param name="dirs">Directories to be included[absolute path to existing, absolute path to be included]. If path to existing is a folder, all sub-folders and sub-files will be retrieved.</param>
            <param name="pathToData">Path to source files</param>
            <param name="ignored">Paths to be included, which will be ignored during inclusion</param>
        </member>
        <member name="M:InstallationHelper.CSProjManager.ResolveSymlink(System.String,System.String)">
            <summary>
            Resolves symlink file. Returns real path to the given path.
            </summary>
            <param name="path">Path to file</param>
            <param name="pathToSymlinks">Base path to data</param>
        </member>
        <member name="M:InstallationHelper.CSProjManager.FindItemGroup(InstallationHelper.CSProjItemTypeEnum)">
            <summary>
            Finds item group with item of given build action or creates new item group node.
            </summary>
            <param name="buildAction">Build action of items in the group</param>
        </member>
        <member name="P:InstallationHelper.CSProjManager.ProjectFilePath">
            <summary>
            Path to project file.
            </summary>
        </member>
        <member name="P:InstallationHelper.CSProjManager.ProjectDirectory">
            <summary>
            Path to directory containing project file.
            </summary>
        </member>
        <member name="P:InstallationHelper.CSProjManager.ProjectFile">
            <summary>
            Project file XML representation.
            </summary>
        </member>
        <member name="P:InstallationHelper.CSProjManager.ProjectFileNameSpace">
            <summary>
            Namespace for project file.
            </summary>
        </member>
        <member name="P:InstallationHelper.CSProjManager.IncludedItems">
            <summary>
            Paths that are included in project file.
            </summary>
        </member>
        <member name="P:InstallationHelper.CSProjManager.RunPostBuildAction">
            <summary>
            Gets or sets value indicating when will be post-build action performed.
            </summary>
        </member>
        <member name="P:InstallationHelper.CSProjManager.PostBuildAction">
            <summary>
            Gets or sets project post-build action.
            </summary>
        </member>
        <member name="P:InstallationHelper.CSProjManager.Boundary">
            <summary>
            Project manager, whose items are a super set of items in this manager (only items, that are in boundary manager, possibly can be in this manager).
            </summary>
        </member>
        <member name="T:InstallationHelper.CommonDataInfo">
            <summary>
            Contains information of common data message from installer.
            </summary>
        </member>
        <member name="M:InstallationHelper.CommonDataInfo.#ctor(System.String)">
            <summary>
             Creates info based on common data message.
            </summary>
            <param name="message">Common data message</param>
        </member>
        <member name="M:InstallationHelper.CommonDataInfo.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
             Creates info based on individual fields.
            </summary>
            <param name="field1">Field 1 from common data message</param>
            <param name="field2">Field 2 from common data message</param>
            <param name="field3">Field 3 from common data message</param>
        </member>
        <member name="M:InstallationHelper.CommonDataInfo.Init(System.Int32,System.String,System.Int32)">
            <summary>
            Initializes properties.
            </summary>
            <param name="field1">Field 1 from common data message</param>
            <param name="field2">Field 2 from common data message</param>
            <param name="field3">Field 3 from common data message</param>
        </member>
        <member name="M:InstallationHelper.CommonDataInfo.ParseCommonData(System.String)">
            <summary>
            Parses common data message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:InstallationHelper.CommonDataInfo.GetInteger(System.String,System.Int32)">
            <summary>
            Returns the integer representation of string or default value if not.
            </summary>
            <param name="value">Value to convert</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="P:InstallationHelper.CommonDataInfo.Type">
            <summary>
            Type of common data.
            </summary>
        </member>
        <member name="P:InstallationHelper.CommonDataInfo.LanguageLangID">
            <summary>
            Language ID.
            </summary>
        </member>
        <member name="P:InstallationHelper.CommonDataInfo.LanguageAnsiCodePage">
            <summary>
            ANSI code page.
            </summary>
        </member>
        <member name="P:InstallationHelper.CommonDataInfo.CaptionText">
            <summary>
            Caption text.
            </summary>
        </member>
        <member name="P:InstallationHelper.CommonDataInfo.CancelVisible">
            <summary>
            Indicate whether to display the cancel button.
            </summary>
        </member>
        <member name="T:InstallationHelper.MsiPackageInstaller">
            <summary>
            Helper for handling MSI package installation.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiPackageInstaller.SUCCESS_CODES">
            <summary>
            Statuses indicating successful installation.
            </summary>
        </member>
        <member name="M:InstallationHelper.MsiPackageInstaller.#ctor(WinAppFoundation.IMessageLog)">
            <summary>
            Default constructor.
            </summary>
            <param name="log">Provides message logging.</param>
        </member>
        <member name="M:InstallationHelper.MsiPackageInstaller.InstallMsi(System.String,System.String)">
            <summary>
            Installs MSI package.
            </summary>
            <param name="pathToMsi">Path to MSI package</param>
            <param name="arguments">Command line property settings. This should be a list of the format Property=Setting Property=Setting.</param>
        </member>
        <member name="P:InstallationHelper.MsiPackageInstaller.ProgressInitialized">
            <summary>
            Indicates whether progress bar has been initialized by 'reset' message from installer.
            </summary>
        </member>
        <member name="P:InstallationHelper.MsiPackageInstaller.ProgressPosition">
            <summary>
            Current progress position.
            </summary>
        </member>
        <member name="P:InstallationHelper.MsiPackageInstaller.ProgressPercentPosition">
            <summary>
            Progress position in percent.
            </summary>
        </member>
        <member name="P:InstallationHelper.MsiPackageInstaller.ProgressDirection">
            <summary>
            Progress direction (1 = forward; -1 = backward).
            </summary>
        </member>
        <member name="P:InstallationHelper.MsiPackageInstaller.ProgressMaxValue">
            <summary>
            Total number of ticks.
            </summary>
        </member>
        <member name="P:InstallationHelper.MsiPackageInstaller.ProgressPleaseWaitRequest">
            <summary>
            Indicates if installation is being initialized.
            </summary>
        </member>
        <member name="P:InstallationHelper.MsiPackageInstaller.Log">
            <summary>
            Provides message logging.
            </summary>
        </member>
        <member name="P:InstallationHelper.MsiPackageInstaller.ExeInstaller">
            <summary>
            Gets Exe Installer for installing packages via msiexec.exe .
            </summary>
        </member>
        <member name="P:InstallationHelper.MsiPackageInstaller.UseMsiExec">
            <summary>
            Indicates whether MSI packages should be processed using API or via MsiExec utility.
            </summary>
        </member>
        <member name="E:InstallationHelper.MsiPackageInstaller.OnProgressChanged">
            <summary>
            Occurs when progress was changed.
            </summary>
        </member>
        <member name="E:InstallationHelper.MsiPackageInstaller.OnError">
            <summary>
            Occurs when installer encounters an error.
            </summary>
        </member>
        <member name="E:InstallationHelper.MsiPackageInstaller.OnFatalExit">
            <summary>
            Occurs when installer exits unexpectedly.
            </summary>
        </member>
        <member name="E:InstallationHelper.MsiPackageInstaller.OnWarning">
            <summary>
            Occurs when warning message was received.
            </summary>
        </member>
        <member name="E:InstallationHelper.MsiPackageInstaller.OnOutOfDiskSpace">
            <summary>
            Occurs when disk is running out of free space.
            </summary>
        </member>
        <member name="E:InstallationHelper.MsiPackageInstaller.OnActionData">
            <summary>
            Occurs when action data has been sent.
            </summary>
        </member>
        <member name="E:InstallationHelper.MsiPackageInstaller.OnCommonData">
            <summary>
            Occurs when common data has been sent.
            </summary>
        </member>
        <member name="E:InstallationHelper.MsiPackageInstaller.OnActionStart">
            <summary>
            Occurs when action message was received.
            </summary>
        </member>
        <member name="E:InstallationHelper.MsiPackageInstaller.OnFileInUse">
            <summary>
            Occurs when files currently in use must be closed.
            </summary>
        </member>
        <member name="E:InstallationHelper.MsiPackageInstaller.OnInfo">
            <summary>
            Occurs when information message was received.
            </summary>
        </member>
        <member name="E:InstallationHelper.MsiPackageInstaller.OnUser">
            <summary>
            Occurs when user request message was received.
            </summary>
        </member>
        <member name="E:InstallationHelper.MsiPackageInstaller.OnTerminate">
            <summary>
            Occurs when UI terminates.
            </summary>
        </member>
        <member name="E:InstallationHelper.MsiPackageInstaller.OnUnhandledException">
            <summary>
            Occurs when unhandled exception raises.
            </summary>
        </member>
        <member name="T:InstallationHelper.MsiPackageInstaller.MsiMessageEvent">
            <summary>
            Delegate for MSI message.
            </summary>
            <param name="sender">Sender</param>
            <param name="context">Context</param>
            <param name="message">Installer message</param>
        </member>
        <member name="T:InstallationHelper.MsiPackageInstaller.CommonDataEvent">
            <summary>
            Delegate for common data message.
            </summary>
            <param name="sender">Sender</param>
            <param name="context">Context</param>
            <param name="commonData">Common data (parsed)</param>
            <param name="message">Common data message</param>
        </member>
        <member name="T:InstallationHelper.MsiPackageInstaller.UnhandledExceptionEvent">
            <summary>
            Delegate for unhandled exception.
            </summary>
            <param name="sender">Sender</param>
            <param name="context">Context</param>
            <param name="ex">Exception</param>
            <param name="message">Installer message</param>
        </member>
        <member name="T:InstallationHelper.ProgressBarInfo">
            <summary>
            Contains information of progress bar message from installer.
            </summary>
        </member>
        <member name="M:InstallationHelper.ProgressBarInfo.#ctor(System.String)">
            <summary>
             Creates info based on progress bar message.
            </summary>
            <param name="message">Progress bar message</param>
        </member>
        <member name="M:InstallationHelper.ProgressBarInfo.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Creates info based on individual fields.
            </summary>
            <param name="field1">Field 1 from progress bar message</param>
            <param name="field2">Field 2 from progress bar message</param>
            <param name="field3">Field 3 from progress bar message</param>
            <param name="field4">Field 4 from progress bar message</param>
        </member>
        <member name="M:InstallationHelper.ProgressBarInfo.Init(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes properties.
            </summary>
            <param name="field1">Field 1 from progress bar message</param>
            <param name="field2">Field 2 from progress bar message</param>
            <param name="field3">Field 3 from progress bar message</param>
            <param name="field4">Field 4 from progress bar message</param>
        </member>
        <member name="M:InstallationHelper.ProgressBarInfo.ParseProgressString(System.String)">
            <summary>
            Parses progress bar message.
            </summary>
            <param name="progressMessage">Progress bar message (e.g. "1: 2 2: 242810880")</param>
        </member>
        <member name="M:InstallationHelper.ProgressBarInfo.GetInteger(System.String,System.Int32)">
            <summary>
            Returns the integer representation of string or default value if not.
            </summary>
            <param name="value">Value to convert</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="P:InstallationHelper.ProgressBarInfo.Action">
            <summary>
            Progress bar action.
            </summary>
        </member>
        <member name="P:InstallationHelper.ProgressBarInfo.ResetTotalNumberOfTicks">
            <summary>
            Expected total number of ticks in the progress bar.
            </summary>
        </member>
        <member name="P:InstallationHelper.ProgressBarInfo.ResetDirection">
            <summary>
            Direction of progress bar. (1 - forward progress bar, -1 = backward progress bar).
            </summary>
        </member>
        <member name="P:InstallationHelper.ProgressBarInfo.ResetWaitingRequest">
            <summary>
            If TRUE, installer is creating the execution script. In this case, the UI could display
            a message to please wait while the installer finishes preparing the installation.
            </summary>
        </member>
        <member name="P:InstallationHelper.ProgressBarInfo.ActionInfoNumberOfTicks">
            <summary>
            Number of ticks the progress bar moves for each ActionData message that is sent by the current action.
            </summary>
        </member>
        <member name="P:InstallationHelper.ProgressBarInfo.ProgressReportNumberOfTicks">
            <summary>
            Number of ticks the progress bar has moved
            </summary>
        </member>
        <member name="P:InstallationHelper.ProgressBarInfo.ProgressAdditionNumberOfTicks">
            <summary>
            Number of ticks to add to total expected progress.
            </summary>
        </member>
        <member name="T:InstallationHelper.CommonDataTypeEnum">
            <summary>
            Types of common data messages.
            </summary>
        </member>
        <member name="F:InstallationHelper.CommonDataTypeEnum.Unknown">
            <summary>
            Unknown data
            </summary>
        </member>
        <member name="F:InstallationHelper.CommonDataTypeEnum.Language">
            <summary>
            Data contains language information.
            </summary>
        </member>
        <member name="F:InstallationHelper.CommonDataTypeEnum.Caption">
            <summary>
            Data contains title.
            </summary>
        </member>
        <member name="F:InstallationHelper.CommonDataTypeEnum.CancelShow">
            <summary>
            Data contains information whether to show or hide cancel button.
            </summary>
        </member>
        <member name="T:InstallationHelper.MsiErrorEnum">
            <summary>
            Standard error codes.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.Success">
            <summary>
            The operation completed successfully.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.FileNotFound">
            <summary>
            The system cannot find the file specified.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.PathNotFound">
            <summary>
            The system cannot find the path specified.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.AccessDenied">
            <summary>
            Access to file is denied.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.InvalidHandle">
            <summary>
            Invalid handle.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.NotEnoughMemory">
            <summary>
            Not enough memory.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.InvalidData">
            <summary>
            The data is invalid.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.OutOfMemory">
            <summary>
            Out of memory.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.InvalidParameter">
            <summary>
            Invalid parameter.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.OpenFailed">
            <summary>
            Impossible to open file or device.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.DiskFull">
            <summary>
            Disk is full.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.CallNotImplemented">
            <summary>
            The function is not available for this platform.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.BadPathName">
            <summary>
            Path is invalid.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.NoData">
            <summary>
            No data.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.MoreData">
            <summary>
            No more data.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.NoMoreItems">
            <summary>
            No more items.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.Directory">
            <summary>
            Directory is invalid.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.FileInvalid">
            <summary>
            File is invalid.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.AppHelpBlock">
            <summary>
            If Windows Installer determines a product may be incompatible with the current operating system, it displays a dialog box informing the user and asking whether to try to install anyway. This error code is returned if the user chooses not to try the installation.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.InstallServiceFailure">
            <summary>
            The Windows Installer service could not be accessed. Contact your support personnel to verify that the Windows Installer service is properly registered.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.UserExit">
            <summary>
            User canceled installation.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.Failure">
            <summary>
            Fatal error during installation.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.InstallSuspend">
            <summary>
            Installation suspended, incomplete.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.UnknownProduct">
            <summary>
            This action is only valid for products that are currently installed.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.UnknownFeature">
            <summary>
            The feature identifier is not registered.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.UnknownComponent">
            <summary>
            The component identifier is not registered.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.UnknownProperty">
            <summary>
            This is an unknown property.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.InvalidHandleState">
            <summary>
            The handle is in an invalid state.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.BadConfiguration">
            <summary>
            The configuration data for this product is corrupt. Contact your support personnel.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.IndexAbsent">
            <summary>
            The component qualifier not present.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.InstallSourceAbsent">
            <summary>
            The installation source for this product is not available. Verify that the source exists and that you can access it.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.InstallPackageVersion">
            <summary>
            This installation package cannot be installed by the Windows Installer service. You must install a Windows service pack that contains a newer version of the Windows Installer service.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.ProductUninstalled">
            <summary>
            The product is uninstalled.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.BadQuerySyntax">
            <summary>
            The SQL query syntax is invalid or unsupported.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.InvalidField">
            <summary>
            The record field does not exist.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.InstallAlreadyRunning">
            <summary>
            Another installation is already in progress. Complete that installation before proceeding with this install.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.InstallPackageOpenFailed">
            <summary>
            This installation package could not be opened. Verify that the package exists and is accessible, or contact the application vendor to verify that this is a valid Windows Installer package.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.InstallPackageInvalid">
            <summary>
            This installation package could not be opened. Contact the application vendor to verify that this is a valid Windows Installer package.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.InstallUIFailure">
            <summary>
            There was an error starting the Windows Installer service user interface. Contact your support personnel.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.InstallLogFailure">
            <summary>
            There was an error opening installation log file. Verify that the specified log file location exists and is writable.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.InstallLanguageUnsupported">
            <summary>
            This language of this installation package is not supported by your system.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.InstallTransformFailure">
            <summary>
            There was an error applying transforms. Verify that the specified transform paths are valid.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.InstallPackageRejected">
            <summary>
            This installation is forbidden by system policy. Contact your system administrator.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.FunctionNotCalled">
            <summary>
            The function could not be executed.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.FunctionFailed">
            <summary>
            The function failed during execution.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.InvalidTable">
            <summary>
            An invalid or unknown table was specified.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.DatatypeMismatch">
            <summary>
            The data supplied is the wrong type.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.UnsupportedType">
            <summary>
            Data of this type is not supported.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.CreateFailed">
            <summary>
            The Windows Installer service failed to start. Contact your support personnel.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.InstallTempUnwritable">
            <summary>
            The Temp folder is either full or inaccessible. Verify that the Temp folder exists and that you can write to it.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.InstallPlatformUnsupported">
            <summary>
            This installation package is not supported on this platform. Contact your application vendor.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.InstallNotUsed">
            <summary>
            Component is not used on this machine.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.PatchPackageOpenFailed">
            <summary>
            This patch package could not be opened. Verify that the patch package exists and is accessible, or contact the application vendor to verify that this is a valid Windows Installer patch package.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.PatchPackageInvalid">
            <summary>
            This patch package could not be opened. Contact the application vendor to verify that this is a valid Windows Installer patch package.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.PatchPackageUnsupported">
            <summary>
            This patch package cannot be processed by the Windows Installer service. You must install a Windows service pack that contains a newer version of the Windows Installer service.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.ProductVersion">
            <summary>
            Another version of this product is already installed. Installation of this version cannot continue. To configure or remove the existing version of this product, use Add/Remove Programs in Control Panel.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.InvalidCommandLine">
            <summary>
            Invalid command line argument. Consult the Windows Installer SDK for detailed command-line help.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.InstallRemoteDisallowed">
            <summary>
            The current user is not permitted to perform installations from a client session of a server running the Terminal Server role service.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.SuccessRebootInitiated">
            <summary>
            Installation succeeded, restart initiated.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.PatchTargetNotFound">
            <summary>
            The installer cannot install the upgrade patch because the program being upgraded may be missing or the upgrade patch updates a different version of the program. Verify that the program to be upgraded exists on your computer and that you have the correct upgrade patch.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.InstallTransformRejected">
            <summary>
            The patch package is not permitted by system policy.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.InstallRemoteProhibited">
            <summary>
            One or more customizations are not permitted by system policy.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.InvalidDataType">
            <summary>
            Invalid data type.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.BadUserName">
            <summary>
            Bad user name
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.SuccessRebootRequired">
            <summary>
            Installation succeeded, restart required.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiErrorEnum.E_Fail">
            <summary>
            Unspecified error.
            </summary>
        </member>
        <member name="T:InstallationHelper.MsiLogModeEnum">
            <summary>
            Log modes.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiLogModeEnum.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiLogModeEnum.FatalExit">
            <summary>
            Premature termination of installation.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiLogModeEnum.Error">
            <summary>
            The error messages are logged.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiLogModeEnum.Warning">
            <summary>
            The warning messages are logged.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiLogModeEnum.User">
            <summary>
            The user requests are logged.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiLogModeEnum.Info">
            <summary>
            The status messages that are not displayed are logged.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiLogModeEnum.FileInUse">
            <summary>
            Files in use information. When this message is received, a FilesInUse Dialog should be displayed.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiLogModeEnum.ResolveSource">
            <summary>
            Request to determine a valid source location.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiLogModeEnum.OutOfDiskSpace">
            <summary>
            There was insufficient disk space.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiLogModeEnum.ActionStart">
            <summary>
            The start of new installation actions are logged.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiLogModeEnum.ActionData">
            <summary>
            The data record with the installation action is logged.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiLogModeEnum.Progress">
            <summary>
            Progress bar information. This message includes information on units so far and total number of units.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiLogModeEnum.CommonData">
            <summary>
            The parameters for user-interface initialization are logged.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiLogModeEnum.Initialize">
            <summary>
            If this is not a quiet installation, then the basic UI has been initialized. If this is a full UI installation,
            the full UI is not yet initialized. This message is only sent to an external user interface and is not logged.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiLogModeEnum.Terminate">
            <summary>
            If a full UI is being used, the full UI has ended. If this is not a quiet installation, the basic UI has not yet ended.
            This message is only sent to an external user interface and is not logged.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiLogModeEnum.ShowDialog">
            <summary>
            Sent prior to display of the full UI dialog. This message is only sent to an external user interface and is not logged.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiLogModeEnum.AllModes">
            <summary>
            All modes.
            </summary>
        </member>
        <member name="T:InstallationHelper.MsiMessageEnum">
            <summary>
            Specifies a combination of one message box style, one message box icon type, one default button, and one installation message type. 
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiMessageEnum.FatalExit">
            <summary>
            Premature termination
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiMessageEnum.Error">
            <summary>
            Formatted error message
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiMessageEnum.Warning">
            <summary>
            Formatted warning message
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiMessageEnum.User">
            <summary>
            User request message.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiMessageEnum.Info">
            <summary>
            Informative message for log
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiMessageEnum.FilesInUse">
            <summary>
            List of files currently in use that must be closed before being replaced.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiMessageEnum.ResolveSource">
            <summary>
            Request to determine a valid source location
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiMessageEnum.OutOfDiskSpace">
            <summary>
            Insufficient disk space message
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiMessageEnum.ActionStart">
            <summary>
            Start of action message. This message includes the action name and description.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiMessageEnum.ActionData">
            <summary>
            Formatted data associated with the individual action item.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiMessageEnum.Progress">
            <summary>
            Progress gauge information. This message includes information on units so far and total number of units.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiMessageEnum.CommonData">
            <summary>
            Formatted dialog information for user interface.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiMessageEnum.Initialize">
            <summary>
            Sent prior to UI initialization, no string data.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiMessageEnum.Terminate">
            <summary>
            Sent after UI termination, no string data.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiMessageEnum.ShowDialog">
            <summary>
            Sent prior to display of authored dialog or wizard
            </summary>
        </member>
        <member name="T:InstallationHelper.MsiInstaller">
            <summary>
            Basic API for handling MSI installer progress.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiInstaller.MSIDLL">
            <summary>
            Windows Installer DLL.
            </summary>
        </member>
        <member name="F:InstallationHelper.MsiInstaller.MessagesMask">
            <summary>
            Mask for filtering installer messages in external UI handler.
            </summary>
        </member>
        <member name="M:InstallationHelper.MsiInstaller.MsiSetInternalUI(InstallationHelper.InstallUIOptions,System.IntPtr)">
            <summary>
            Enables the installer's internal user interface.
            </summary>
            <param name="uiLevel">Specifies the level of complexity of the user interface.</param>
            <param name="parentHandle">Pointer to a window. This window becomes the owner of any user interface created. A pointer
            to the previous owner of the user interface is returned. If this parameter is null, the owner of the user interface does not change.</param>
            <returns>The previous user interface level is returned. If an invalid UI level is passed, then 'NoChange' is returned.</returns>
        </member>
        <member name="M:InstallationHelper.MsiInstaller.MsiSetExternalUI(InstallationHelper.MsiUIHandler,InstallationHelper.MsiLogModeEnum,System.IntPtr)">
            <summary>
            Enables an external user-interface handler. 
            </summary>
            <param name="handler">Specifies a callback function that conforms to the MsiUIHandler specification.</param>
            <param name="messageFilter">Specifies which messages to handle using the external message handler. If the external handler returns a non-zero result,
            then that message will not be sent to the UI, instead the message will be logged if logging has been enabled.</param>
            <param name="context">Pointer to an application context that is passed to the callback function. This parameter can be used for error checking</param>
            <returns>The return value is the previously set external handler, or zero (0) if there was no previously set handler.</returns>
        </member>
        <member name="M:InstallationHelper.MsiInstaller.MsiInstallProduct(System.String,System.String)">
            <summary>
            Installs or uninstalls a product
            </summary>
            <param name="packagePath">A null-terminated string that specifies the path to the location of the Windows Installer package.</param>
            <param name="commandLine">A null-terminated string that specifies the command line property settings. This should be a list of the format Property=Setting Property=Setting. </param>
        </member>
        <member name="T:InstallationHelper.MsiUIHandler">
            <summary>
            Delegate for callback function that the installer calls for progress notification and error messages.
            </summary>
            <param name="context">Pointer to an application context passed to the MsiSetExternalUI function.</param>
            <param name="messageType">Specifies a combination of one message box style, one message box icon type,
            one default button, and one installation message type.</param>
            <param name="message">Specifies the message text.</param>
            <returns>An external handler can return any number of values to Windows Installer depending on the button
            type provided in the message type parameter the installer passes to the handler. A return value of –1 indicates
            that an internal error occurred in the external UI handler. A return value of 0 indicates that the external
            UI handler has not handled the installer message and the installer must handle the message instead. </returns>
        </member>
        <member name="T:InstallationHelper.ProgressBarActionEnum">
            <summary>
            Types of progress bar position changes.
            </summary>
        </member>
        <member name="F:InstallationHelper.ProgressBarActionEnum.Unknown">
            <summary>
            Unknown action.
            </summary>
        </member>
        <member name="F:InstallationHelper.ProgressBarActionEnum.Reset">
            <summary>
            Reset progress bar and set expected total number of ticks.
            </summary>
        </member>
        <member name="F:InstallationHelper.ProgressBarActionEnum.ActionInfo">
            <summary>
            Additional information related to progress message.
            </summary>
        </member>
        <member name="F:InstallationHelper.ProgressBarActionEnum.ProgressReport">
            <summary>
            Increment/change progress.
            </summary>
        </member>
        <member name="F:InstallationHelper.ProgressBarActionEnum.ProgressAddition">
            <summary>
            Adding ticks to expected total number of ticks.
            </summary>
        </member>
        <member name="T:InstallationHelper.CSharpProject">
            <summary>
            Class representing windows c# project.
            </summary>
        </member>
        <member name="F:InstallationHelper.CSharpProject.PROJECT_TYPE_GUID_STRING">
            <summary>
            Default C# project project type.
            </summary>
        </member>
        <member name="M:InstallationHelper.CSharpProject.#ctor(InstallationHelper.SlnManager,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="slnManager">Solution manager</param>
            <param name="solutionProject">Microsoft.Build.Construction.ProjectInSolution object</param>
        </member>
        <member name="M:InstallationHelper.CSharpProject.#ctor(InstallationHelper.SlnManager,System.String,System.String,System.Guid)">
            <summary>
            Create new project.
            </summary>
            <param name="slnManager">Solution manager</param>
            <param name="projectName">Project name</param>
            <param name="relativePath">Project relative path from solution root folder</param>
            <param name="projectGuid">Project GUID</param>
        </member>
        <member name="P:InstallationHelper.CSharpProject.ProjectTypeGuid">
            <summary>
            Default C# project project type.
            </summary>
        </member>
        <member name="T:InstallationHelper.SlnManager">
            <summary>
            Reflects:
            
            internal class SolutionParser
            Name: Microsoft.Build.Construction.SolutionParser
            Assembly: Microsoft.Build, Version=4.0.0.0
            </summary>
        </member>
        <member name="M:InstallationHelper.SlnManager.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:InstallationHelper.SlnManager.#ctor(System.String)">
            <summary>
            Initializes solution manager with path to the solution file.
            </summary>
            <param name="solutionFilePath">Path to the solution file to be modified.</param>
        </member>
        <member name="M:InstallationHelper.SlnManager.UpdateSolutionFolder(System.String)">
            <summary>
            Generates solution folder with up-to-date contents. By default it is the Lib folder.
            </summary>
            <param name="folderName">Name of the folder to be updated.</param>
        </member>
        <member name="M:InstallationHelper.SlnManager.RemoveProject(InstallationHelper.SolutionProject,System.Boolean)">
            <summary>
            Removes the specified project from solution file content.
            </summary>
            <param name="project">Project to be removed</param>
            <param name="completely">Indicates whether configuration and nested projects record should be removed with the project. True by default.</param>
            <exception cref="T:System.ArgumentException">When project doesn't exist in current solution.</exception>
        </member>
        <member name="M:InstallationHelper.SlnManager.RemoveProjectConfiguration(InstallationHelper.SolutionProject,System.Boolean)">
            <summary>
            Removes platform configurations for the specified project from solution file content.
            </summary>
            <param name="project">Project whose configurations should be removed.</param>
            <param name="disableBuildOnly">Indicates whether only project build action should be turned off.</param>
        </member>
        <member name="M:InstallationHelper.SlnManager.GenerateProjectConfiguration(InstallationHelper.SolutionProject)">
            <summary>
            Generates platform configurations for the specified project in solution file.
            </summary>
            <param name="project">Project to generate build configurations for.</param>
        </member>
        <member name="M:InstallationHelper.SlnManager.GetSolutionConfigurations">
            <summary>
            Gets list of solution platform configurations.
            </summary>
        </member>
        <member name="M:InstallationHelper.SlnManager.RemoveNestedProjects(InstallationHelper.SolutionProject)">
            <summary>
            Removes nested project records of specified project from global section.
            </summary>
            <param name="project">Project to be </param>
        </member>
        <member name="M:InstallationHelper.SlnManager.GetNestedParentGuid(InstallationHelper.SolutionProject)">
            <summary>
            Get nested parent of the project.
            </summary>
            <param name="parent">Project to look for.</param>
        </member>
        <member name="M:InstallationHelper.SlnManager.GetNestedChildrenGuids(InstallationHelper.SolutionProject)">
            <summary>
            Get nested children of the project.
            </summary>
            <param name="parent">Project to look for.</param>
        </member>
        <member name="M:InstallationHelper.SlnManager.RemoveSourceControlBindings">
            <summary>
            Removes source control bindings from .sln file.
            </summary>
        </member>
        <member name="M:InstallationHelper.SlnManager.AddProject(InstallationHelper.SolutionProject,System.Boolean)">
            <summary>
            Adds specified project to the solution.
            </summary>
            <param name="project">Project to be included in the current solution.</param>
            <param name="overwrite">Overwrite existing project.</param>
            <exception cref="T:System.ArgumentException">When project already exists and isn't to be overwritten.</exception>
        </member>
        <member name="M:InstallationHelper.SlnManager.AddNestedProject(System.Guid,System.Guid)">
            <summary>
            Adds nested project record to the solution.
            </summary>
            <param name="child">Child project GUID</param>
            <param name="parent">Project parent GUID</param>
        </member>
        <member name="M:InstallationHelper.SlnManager.MergeWith(InstallationHelper.SlnManager)">
            <summary>
            Combines current solution file with the given one
            </summary>
            <param name="solution">Solution file to be merged with the current one.</param>
        </member>
        <member name="M:InstallationHelper.SlnManager.Save">
            <summary>
            Save current solution file.
            </summary>
        </member>
        <member name="M:InstallationHelper.SlnManager.GetProjectTypeGuid(System.Guid)">
            <summary>
            Get project type GUID from solution file.
            </summary>
            <param name="projectGuid">Project GUID of requested project.</param>
        </member>
        <member name="M:InstallationHelper.SlnManager.GetGuidString(System.Guid)">
            <summary>
            Returns given GUID in a format that is used by Visual Studio (uppercase with braces).
            </summary>
            <param name="guid">GUID to be formatted</param>
        </member>
        <member name="M:InstallationHelper.SlnManager.GetProjects">
            <summary>
            Gets collection of projects. (Useful when collection was modified.)
            </summary>
        </member>
        <member name="M:InstallationHelper.SlnManager.ReplaceFileContent(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32)">
            <summary>
            Replaces all strings within solution file content that match regular expression.
            </summary>
            <param name="pattern">Regular expression.</param>
            <param name="replacement">Replacement string.</param>
            <param name="startIndex">Position in the solution file where the search starts.</param>
            <param name="endIndex">Position in the solution file where the search ends.</param>
        </member>
        <member name="M:InstallationHelper.SlnManager.CreateSolutionFolder(System.String)">
            <summary>
            Creates solution folder project for given path in the solution.
            </summary>
            <param name="folderPath">Path to the solution folder</param>
        </member>
        <member name="M:InstallationHelper.SlnManager.LoadSolutionItems(InstallationHelper.SolutionFolderProject)">
            <summary>
            Load solution items of desired project
            </summary>
            <param name="project">Project that owns solution items</param>
        </member>
        <member name="P:InstallationHelper.SlnManager.Projects">
            <summary>
            Collection of projects.
            </summary>
        </member>
        <member name="P:InstallationHelper.SlnManager.SolutionFileContent">
            <summary>
            Contents of the solution file, may contain unsaved modifications.
            </summary>
        </member>
        <member name="P:InstallationHelper.SlnManager.SolutionFilePath">
            <summary>
            Path to the solution file to be modified.
            </summary>
        </member>
        <member name="P:InstallationHelper.SlnManager.SolutionFolder">
            <summary>
            Folder where .sln file is located.
            </summary>
        </member>
        <member name="T:InstallationHelper.SolutionFolderProject">
            <summary>
            Class representing solution folder project.
            </summary>
        </member>
        <member name="F:InstallationHelper.SolutionFolderProject.PROJECT_TYPE_GUID_STRING">
            <summary>
            Solution folder project type.
            </summary>
        </member>
        <member name="M:InstallationHelper.SolutionFolderProject.#ctor(InstallationHelper.SlnManager,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="slnManager">Solution manager</param>
            <param name="solutionProject">Microsoft.Build.Construction.ProjectInSolution object</param>
        </member>
        <member name="M:InstallationHelper.SolutionFolderProject.#ctor(InstallationHelper.SlnManager,System.String,System.String,System.Guid)">
            <summary>
            Create new project.
            </summary>
            <param name="slnManager">Solution manager</param>
            <param name="projectName">Project name</param>
            <param name="relativePath">Project relative path from solution root folder</param>
            <param name="projectGuid">Project GUID</param>
        </member>
        <member name="M:InstallationHelper.SolutionFolderProject.GetProjectSectionString">
            <summary>
            Build project section string.
            </summary>
        </member>
        <member name="M:InstallationHelper.SolutionFolderProject.Equals(System.Object)">
            <summary>
            Compares two SolutionFolderProjects with their relative paths.
            </summary>
            <param name="obj">Object to compare</param>
        </member>
        <member name="M:InstallationHelper.SolutionFolderProject.Equals(InstallationHelper.SolutionFolderProject)">
            <summary>
            Compares two SolutionFolderProjects with their relative paths.
            </summary>
            <param name="other">Project to compare</param>
        </member>
        <member name="M:InstallationHelper.SolutionFolderProject.GetHashCode">
            <summary>
            Generates hash code from SolutionFolderProjects relative path.
            </summary>
        </member>
        <member name="P:InstallationHelper.SolutionFolderProject.ProjectTypeGuid">
            <summary>
            Solution folder project type.
            </summary>
        </member>
        <member name="P:InstallationHelper.SolutionFolderProject.FilesInProject">
            <summary>
            Files inside the project. Relevant only if project type is "Solution Folder Project".
            </summary>
        </member>
        <member name="T:InstallationHelper.WebProjectInfo">
            <summary>
            Info class containing information about web project.
            </summary>
        </member>
        <member name="M:InstallationHelper.WebProjectInfo.#ctor(System.String)">
            <summary>
            Initializes project stored on given file system path.
            </summary>
            <param name="path">Path to solution folder or web project folder.</param>
        </member>
        <member name="M:InstallationHelper.WebProjectInfo.CheckKenticoInstallation">
            <summary>
            Check if web project contains everything necessary for Kentico.
            </summary>
        </member>
        <member name="M:InstallationHelper.WebProjectInfo.DetectNetVersion">
            <summary>
            Determines project DLL version.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectInfo.Version">
            <summary>
            Project version.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectInfo.NetVersion">
            <summary>
            Project .NET framework version.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectInfo.SolutionPath">
            <summary>
            Gets solution folder physical path.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectInfo.WebProjectPath">
            <summary>
            Gets web project folder physical path
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectInfo.IsWebApplication">
            <summary>
            Indicates whether the project is a web application.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectInfo.IsSourceCode">
            <summary>
            Indicates whether the project contains source code.
            </summary>
        </member>
        <member name="P:InstallationHelper.WebProjectInfo.IsAzureProject">
            <summary>
            Indicates whether the project is Microsoft Azure project.
            </summary>
        </member>
    </members>
</doc>
